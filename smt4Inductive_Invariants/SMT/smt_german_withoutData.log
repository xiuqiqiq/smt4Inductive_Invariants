inv_name: CntrlProp
inv.inv: forall i : NODE do
  forall j : NODE do
    i != j ->   (Cache[i].State = E ->   Cache[j].State = I) & (Cache[i].State = S ->   Cache[j].State = I | Cache[j].State = S)
  end
end
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
c.inv_instance: {'CntrlProp': OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S))}
CntrlProp_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(1 != 2 ->   (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, Cache[2].State == Cache[2].State', Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
        And(Cache[1].State' == S,
            And(Cache[2].State' != I, Cache[2].State' != S))), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S)))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State' = E,
 Cache[1].State' = E,
 Chan2[1].Cmd = GntE,
 Cache[2].State = E,
 Chan2[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S))]
set(self.enum_notEqulVars): {Cache[2].State'}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Chan2[1].Cmd, Chan2[1].Cmd', Cache[1].State'}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S']}
1111: [Chan2[1].Cmd == GntE,
 Cache[1].State' == E,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S)))]
checkVars: []
solution: [OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1"
   !(Cache[1].State = I & Cache[2].State = E & Chan2[1].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1"
   !(Cache[2].State = E & Chan2[1].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1"
   !(Chan2[1].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntE1']
self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntE)
invPattern: []
add pattern: !(Cache[2].State = E & Chan2[1].Cmd = GntE)
CntrlProp_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(1 != 2 ->   (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, Cache[1].State == Cache[1].State', Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
        And(Cache[1].State' == S,
            And(Cache[2].State' != I, Cache[2].State' != S))), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE)]
sat
解是：

[Cache[2].State = I,
 Chan2[1].Cmd = Empty,
 Cache[1].State' = E,
 Chan2[2].Cmd' = Empty,
 Chan2[2].Cmd = GntE,
 Cache[2].State' = E,
 Cache[1].State = E]
invlist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, E), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Cache[1].State', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE']}
1111: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE)]
checkVars: [Chan2[1].Cmd]
model[cti[str(vars)][0]]: Empty <class 'z3.z3.DatatypeRef'>
add:
Chan2[1].Cmd != Empty
2222: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Chan2[1].Cmd != Empty]
解是：

[Cache[2].State = S,
 Chan2[2].Cmd' = Empty,
 Cache[1].State = S,
 Cache[2].State' = E,
 Chan2[1].Cmd = ReqS,
 Chan2[2].Cmd = GntE,
 Cache[1].State' = S]
invlist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Cache[1].State', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE']}
1111: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Chan2[1].Cmd != Empty]
checkVars: [Chan2[1].Cmd]
model[cti[str(vars)][0]]: ReqS <class 'z3.z3.DatatypeRef'>
add:
Chan2[1].Cmd != ReqS
2222: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Chan2[1].Cmd != Empty,
 Chan2[1].Cmd != ReqS]
解是：

[Cache[2].State = S,
 Chan2[2].Cmd' = Empty,
 Cache[1].State = S,
 Cache[2].State' = E,
 Chan2[1].Cmd = ReqE,
 Chan2[2].Cmd = GntE,
 Cache[1].State' = S]
invlist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Cache[1].State', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE']}
1111: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Chan2[1].Cmd != Empty,
 Chan2[1].Cmd != ReqS]
checkVars: [Chan2[1].Cmd]
model[cti[str(vars)][0]]: ReqE <class 'z3.z3.DatatypeRef'>
add:
Chan2[1].Cmd != ReqE
2222: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Chan2[1].Cmd != Empty,
 Chan2[1].Cmd != ReqS,
 Chan2[1].Cmd != ReqE]
解是：

[Cache[2].State = S,
 Chan2[2].Cmd' = Empty,
 Cache[1].State = S,
 Cache[2].State' = E,
 Chan2[1].Cmd = Inv,
 Chan2[2].Cmd = GntE,
 Cache[1].State' = S]
invlist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Cache[1].State', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE']}
1111: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Chan2[1].Cmd != Empty,
 Chan2[1].Cmd != ReqS,
 Chan2[1].Cmd != ReqE]
checkVars: [Chan2[1].Cmd]
model[cti[str(vars)][0]]: Inv <class 'z3.z3.DatatypeRef'>
add:
Chan2[1].Cmd != Inv
2222: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Chan2[1].Cmd != Empty,
 Chan2[1].Cmd != ReqS,
 Chan2[1].Cmd != ReqE,
 Chan2[1].Cmd != Inv]
解是：

[Cache[2].State = S,
 Chan2[2].Cmd' = Empty,
 Cache[1].State = S,
 Cache[2].State' = E,
 Chan2[1].Cmd = InvAck,
 Chan2[2].Cmd = GntE,
 Cache[1].State' = S]
invlist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Cache[1].State', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE']}
1111: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Chan2[1].Cmd != Empty,
 Chan2[1].Cmd != ReqS,
 Chan2[1].Cmd != ReqE,
 Chan2[1].Cmd != Inv]
checkVars: [Chan2[1].Cmd]
model[cti[str(vars)][0]]: InvAck <class 'z3.z3.DatatypeRef'>
add:
Chan2[1].Cmd != InvAck
2222: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Chan2[1].Cmd != Empty,
 Chan2[1].Cmd != ReqS,
 Chan2[1].Cmd != ReqE,
 Chan2[1].Cmd != Inv,
 Chan2[1].Cmd != InvAck]
解是：

[Cache[2].State = S,
 Chan2[2].Cmd' = Empty,
 Cache[1].State = S,
 Cache[2].State' = E,
 Chan2[1].Cmd = GntS,
 Chan2[2].Cmd = GntE,
 Cache[1].State' = S]
invlist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Cache[1].State', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE']}
1111: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Chan2[1].Cmd != Empty,
 Chan2[1].Cmd != ReqS,
 Chan2[1].Cmd != ReqE,
 Chan2[1].Cmd != Inv,
 Chan2[1].Cmd != InvAck]
checkVars: [Chan2[1].Cmd]
model[cti[str(vars)][0]]: GntS <class 'z3.z3.DatatypeRef'>
add:
Chan2[1].Cmd != GntS
2222: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Chan2[1].Cmd != Empty,
 Chan2[1].Cmd != ReqS,
 Chan2[1].Cmd != ReqE,
 Chan2[1].Cmd != Inv,
 Chan2[1].Cmd != InvAck,
 Chan2[1].Cmd != GntS]
解是：

[Cache[2].State = S,
 Chan2[2].Cmd' = Empty,
 Cache[1].State = S,
 Cache[2].State' = E,
 Chan2[1].Cmd = GntE,
 Chan2[2].Cmd = GntE,
 Cache[1].State' = S]
invlist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, GntE)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Cache[1].State', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE']}
1111: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Chan2[1].Cmd != Empty,
 Chan2[1].Cmd != ReqS,
 Chan2[1].Cmd != ReqE,
 Chan2[1].Cmd != Inv,
 Chan2[1].Cmd != InvAck,
 Chan2[1].Cmd != GntS]
checkVars: [Chan2[1].Cmd]
model[cti[str(vars)][0]]: GntE <class 'z3.z3.DatatypeRef'>
solution: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, E), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, E), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = E & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, E), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, E), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[2].State = I & Cache[1].State = E & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, E)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, E)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = E & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE2']
sublist: [OpExpr(=, Cache[1].State, E)]
inv_list [OpExpr(=, Cache[1].State, E)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = E);
counter_ex: ['CntrlProp_RecvGntE2']
self.aux_inv: !(Cache[1].State = E & Chan2[2].Cmd = GntE)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE']]
exist self.aux_inv: !(Cache[1].State = E & Chan2[2].Cmd = GntE)
solution: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[2].State = S & Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE2']
sublist: [OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = S);
counter_ex: ['CntrlProp_RecvGntE2']
self.aux_inv: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE']]
add pattern: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
solution: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[2].State = S & Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE2']
sublist: [OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = S);
counter_ex: ['CntrlProp_RecvGntE2']
self.aux_inv: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE']]
exist self.aux_inv: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
solution: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[2].State = S & Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE2']
sublist: [OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = S);
counter_ex: ['CntrlProp_RecvGntE2']
self.aux_inv: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE']]
exist self.aux_inv: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
solution: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[2].State = S & Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE2']
sublist: [OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = S);
counter_ex: ['CntrlProp_RecvGntE2']
self.aux_inv: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE']]
exist self.aux_inv: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
solution: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[2].State = S & Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE2']
sublist: [OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = S);
counter_ex: ['CntrlProp_RecvGntE2']
self.aux_inv: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE']]
exist self.aux_inv: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
solution: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Chan2[1].Cmd = GntE & Cache[2].State = S & Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[2].State = S & Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = S & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE2']
sublist: [OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2"
   !(Cache[1].State = S);
counter_ex: ['CntrlProp_RecvGntE2']
self.aux_inv: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE']]
exist self.aux_inv: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
CntrlProp_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(1 != 2 ->   (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, Cache[2].State == Cache[2].State', Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
        And(Cache[1].State' == S,
            And(Cache[2].State' != I, Cache[2].State' != S))), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State' = E,
 Chan2[2].Cmd = Empty,
 Cache[1].State' = S,
 Chan2[1].Cmd = GntS,
 Cache[2].State = E,
 Chan2[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Chan2[1].Cmd, Chan2[1].Cmd', Cache[1].State'}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE'], 'Chan2[2].Cmd': ['GntE']}
1111: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE)]
checkVars: [Chan2[2].Cmd]
model[cti[str(vars)][0]]: Empty <class 'z3.z3.DatatypeRef'>
add:
Chan2[2].Cmd != Empty
2222: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Chan2[2].Cmd != Empty]
解是：

[Cache[2].State = E,
 Cache[1].State' = S,
 Cache[1].State = I,
 Cache[2].State' = E,
 Chan2[1].Cmd = GntS,
 Chan2[2].Cmd = ReqS,
 Chan2[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Chan2[1].Cmd, Chan2[1].Cmd', Cache[1].State'}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE'], 'Chan2[2].Cmd': ['GntE']}
1111: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Chan2[2].Cmd != Empty]
checkVars: [Chan2[2].Cmd]
model[cti[str(vars)][0]]: ReqS <class 'z3.z3.DatatypeRef'>
add:
Chan2[2].Cmd != ReqS
2222: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Chan2[2].Cmd != Empty,
 Chan2[2].Cmd != ReqS]
解是：

[Cache[2].State = E,
 Cache[1].State' = S,
 Cache[1].State = I,
 Cache[2].State' = E,
 Chan2[1].Cmd = GntS,
 Chan2[2].Cmd = ReqE,
 Chan2[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Chan2[1].Cmd, Chan2[1].Cmd', Cache[1].State'}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE'], 'Chan2[2].Cmd': ['GntE']}
1111: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Chan2[2].Cmd != Empty,
 Chan2[2].Cmd != ReqS]
checkVars: [Chan2[2].Cmd]
model[cti[str(vars)][0]]: ReqE <class 'z3.z3.DatatypeRef'>
add:
Chan2[2].Cmd != ReqE
2222: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Chan2[2].Cmd != Empty,
 Chan2[2].Cmd != ReqS,
 Chan2[2].Cmd != ReqE]
解是：

[Cache[2].State = E,
 Cache[1].State' = S,
 Cache[1].State = I,
 Cache[2].State' = E,
 Chan2[1].Cmd = GntS,
 Chan2[2].Cmd = Inv,
 Chan2[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Chan2[1].Cmd, Chan2[1].Cmd', Cache[1].State'}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE'], 'Chan2[2].Cmd': ['GntE']}
1111: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Chan2[2].Cmd != Empty,
 Chan2[2].Cmd != ReqS,
 Chan2[2].Cmd != ReqE]
checkVars: [Chan2[2].Cmd]
model[cti[str(vars)][0]]: Inv <class 'z3.z3.DatatypeRef'>
add:
Chan2[2].Cmd != Inv
2222: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Chan2[2].Cmd != Empty,
 Chan2[2].Cmd != ReqS,
 Chan2[2].Cmd != ReqE,
 Chan2[2].Cmd != Inv]
解是：

[Cache[2].State = E,
 Cache[1].State' = S,
 Cache[1].State = I,
 Cache[2].State' = E,
 Chan2[1].Cmd = GntS,
 Chan2[2].Cmd = InvAck,
 Chan2[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Chan2[1].Cmd, Chan2[1].Cmd', Cache[1].State'}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE'], 'Chan2[2].Cmd': ['GntE']}
1111: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Chan2[2].Cmd != Empty,
 Chan2[2].Cmd != ReqS,
 Chan2[2].Cmd != ReqE,
 Chan2[2].Cmd != Inv]
checkVars: [Chan2[2].Cmd]
model[cti[str(vars)][0]]: InvAck <class 'z3.z3.DatatypeRef'>
add:
Chan2[2].Cmd != InvAck
2222: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Chan2[2].Cmd != Empty,
 Chan2[2].Cmd != ReqS,
 Chan2[2].Cmd != ReqE,
 Chan2[2].Cmd != Inv,
 Chan2[2].Cmd != InvAck]
解是：

[Cache[2].State = E,
 Cache[1].State' = S,
 Cache[1].State = I,
 Cache[2].State' = E,
 Chan2[1].Cmd = GntS,
 Chan2[2].Cmd = GntS,
 Chan2[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[2].Cmd, GntS)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Chan2[1].Cmd, Chan2[1].Cmd', Cache[1].State'}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE'], 'Chan2[2].Cmd': ['GntE']}
1111: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Chan2[2].Cmd != Empty,
 Chan2[2].Cmd != ReqS,
 Chan2[2].Cmd != ReqE,
 Chan2[2].Cmd != Inv,
 Chan2[2].Cmd != InvAck]
checkVars: [Chan2[2].Cmd]
model[cti[str(vars)][0]]: GntS <class 'z3.z3.DatatypeRef'>
add:
Chan2[2].Cmd != GntS
2222: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Chan2[2].Cmd != Empty,
 Chan2[2].Cmd != ReqS,
 Chan2[2].Cmd != ReqE,
 Chan2[2].Cmd != Inv,
 Chan2[2].Cmd != InvAck,
 Chan2[2].Cmd != GntS]
解是：

[Cache[2].State = E,
 Cache[1].State' = S,
 Cache[1].State = I,
 Cache[2].State' = E,
 Chan2[1].Cmd = GntS,
 Chan2[2].Cmd = GntE,
 Chan2[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[2].Cmd, GntE)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Chan2[1].Cmd, Chan2[1].Cmd', Cache[1].State'}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE'], 'Chan2[2].Cmd': ['GntE']}
1111: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Cache[2].State == Cache[2].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Chan2[2].Cmd != Empty,
 Chan2[2].Cmd != ReqS,
 Chan2[2].Cmd != ReqE,
 Chan2[2].Cmd != Inv,
 Chan2[2].Cmd != InvAck,
 Chan2[2].Cmd != GntS]
checkVars: [Chan2[2].Cmd]
model[cti[str(vars)][0]]: GntE <class 'z3.z3.DatatypeRef'>
solution: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Chan2[2].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[1].State = I & Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Chan2[1].Cmd = GntS);
counter_ex: ['CntrlProp_RecvGntS1']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntS1']
self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE']]
add pattern: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
solution: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[1].State = I & Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Chan2[1].Cmd = GntS);
counter_ex: ['CntrlProp_RecvGntS1']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntS1']
self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS']]
exist self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
solution: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[1].State = I & Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Chan2[1].Cmd = GntS);
counter_ex: ['CntrlProp_RecvGntS1']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntS1']
self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS']]
exist self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
solution: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[1].State = I & Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Chan2[1].Cmd = GntS);
counter_ex: ['CntrlProp_RecvGntS1']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntS1']
self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS']]
exist self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
solution: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[1].State = I & Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Chan2[1].Cmd = GntS);
counter_ex: ['CntrlProp_RecvGntS1']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntS1']
self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS']]
exist self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
solution: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[2].Cmd, GntS)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[2].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Chan2[2].Cmd = GntS & Cache[1].State = I & Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[1].State = I & Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Chan2[1].Cmd = GntS);
counter_ex: ['CntrlProp_RecvGntS1']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntS1']
self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS']]
exist self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
solution: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Chan2[2].Cmd = GntE & Cache[1].State = I & Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[1].State = I & Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Chan2[1].Cmd = GntS);
counter_ex: ['CntrlProp_RecvGntS1']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntS1"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntS1']
self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS']]
exist self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
CntrlProp_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(1 != 2 ->   (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, Cache[1].State == Cache[1].State', Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
        And(Cache[1].State' == S,
            And(Cache[2].State' != I, Cache[2].State' != S))), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS)]
sat
解是：

[Chan2[2].Cmd' = Empty,
 Chan2[2].Cmd = GntS,
 Cache[2].State = I,
 Cache[2].State' = S,
 Cache[1].State' = E,
 Cache[1].State = E]
invlist: [OpExpr(=, Chan2[2].Cmd, GntS), OpExpr(=, Cache[1].State, E), OpExpr(=, Cache[2].State, I)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS)]
set(self.enum_notEqulVars): {Cache[2].State', Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Cache[1].State', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {"Cache[2].State'": ['I', 'S'], 'Chan2[1].Cmd': ['GntE', 'GntS'], 'Chan2[2].Cmd': ['GntE']}
1111: [Chan2[2].Cmd == GntS,
 Cache[2].State' == S,
 Chan2[2].Cmd' == Empty,
 Cache[1].State == Cache[1].State',
 Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
         And(Cache[1].State' == S,
             And(Cache[2].State' != I, Cache[2].State' != S))),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS)]
checkVars: [Chan2[1].Cmd]
model[cti[str(vars)][0]]: None <class 'NoneType'>
solution: [OpExpr(=, Chan2[2].Cmd, GntS), OpExpr(=, Cache[1].State, E), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntS), OpExpr(=, Cache[1].State, E), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntS2"
   !(Cache[2].State = I & Cache[1].State = E & Chan2[2].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntS), OpExpr(=, Cache[1].State, E)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntS), OpExpr(=, Cache[1].State, E)]
new_inv: invariant "CntrlProp_RecvGntS2"
   !(Cache[1].State = E & Chan2[2].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntS)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntS2"
   !(Chan2[2].Cmd = GntS);
counter_ex: ['CntrlProp_RecvGntS2']
sublist: [OpExpr(=, Cache[1].State, E)]
inv_list [OpExpr(=, Cache[1].State, E)]
new_inv: invariant "CntrlProp_RecvGntS2"
   !(Cache[1].State = E);
counter_ex: ['CntrlProp_RecvGntS2']
self.aux_inv: !(Cache[1].State = E & Chan2[2].Cmd = GntS)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS']]
exist self.aux_inv: !(Cache[1].State = E & Chan2[2].Cmd = GntS)
CntrlProp_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(1 != 2 ->   (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, Cache[2].State == Cache[2].State', Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
        And(Cache[1].State' == S,
            And(Cache[2].State' != I, Cache[2].State' != S))), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS)]
unsat
CntrlProp_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(1 != 2 ->   (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, Cache[1].State == Cache[1].State', Implies(Implies(Cache[1].State' == E, Cache[2].State' == I),
        And(Cache[1].State' == S,
            And(Cache[2].State' != I, Cache[2].State' != S))), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS)]
unsat
list0: {'CntrlProp_RecvGntE1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), 'CntrlProp_RecvGntE2_1': NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), 'CntrlProp_RecvGntS1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS)}
new_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntE)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1': NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), 'CntrlProp_RecvGntS1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS)}
CntrlProp_RecvGntE1_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntE))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntE))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', And(Cache[2].State' == E, Chan2[1].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan2[2].Cmd' = Empty,
 Chan2[2].Cmd = GntE,
 Chan2[1].Cmd = GntE,
 Cache[2].State' = E,
 Chan2[1].Cmd' = GntE]
invlist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS'], 'Chan2[2].Cmd': ['GntE']}
1111: [Chan2[2].Cmd == GntE,
 Cache[2].State' == E,
 Chan2[2].Cmd' == Empty,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(Cache[2].State' == E, Chan2[1].Cmd' == GntE),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS)]
checkVars: []
solution: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2"
   !(Cache[2].State = S & Cache[1].State = I & Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2"
   !(Cache[1].State = I & Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Chan2[1].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Chan2[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2"
   !(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2']
sublist: [OpExpr(=, Chan2[1].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2"
   !(Chan2[1].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2']
self.aux_inv: !(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS']]
add pattern: !(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE)
CntrlProp_RecvGntE1_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntE))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE)]
unsat
CntrlProp_RecvGntE1_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntE))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', And(Cache[2].State' == E, Chan2[1].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntE))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE)]
sat
解是：

[Cache[1].State = I,
 Chan2[1].Cmd' = GntE,
 ShrSet[2] = False,
 ExGntd = False,
 Chan2[1].Cmd = Empty,
 Cache[2].State' = E,
 CurCmd' = "Empty",
 ShrSet[1]' = True,
 CurCmd = "ReqE",
 ShrSet[1] = False,
 ExGntd' = True,
 Cache[2].State = E]
invlist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Cache[2].State', Chan2[1].Cmd, Chan2[1].Cmd'}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE']}
1111: [And(CurCmd == "ReqE",
     And(Chan2[1].Cmd == Empty,
         And(ExGntd == False,
             And(ShrSet[2] == False, ShrSet[1] == False)))),
 Chan2[1].Cmd' == GntE,
 ShrSet[1]' == True,
 ExGntd' == True,
 CurCmd' == "Empty",
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, Chan2[1].Cmd' == GntE),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE)]
checkVars: [Chan2[2].Cmd]
model[cti[str(vars)][0]]: None <class 'NoneType'>
solution: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(Cache[1].State = I & Cache[2].State = E & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(Cache[2].State = E & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(Cache[2].State = E & ShrSet[2] = false & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(ShrSet[2] = false & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(Cache[2].State = E & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(Cache[2].State = E & Chan2[1].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, false), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, false), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(Cache[2].State = E & ExGntd = false & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(ExGntd = false & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(Cache[2].State = E & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1']
sublist: [OpExpr(=, ExGntd, false), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, ExGntd, false), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(Cache[2].State = E & ExGntd = false);
No cti found. The invariants are OK.
sublist: [OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(ExGntd = false);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1']
self.aux_inv: !(Cache[2].State = E & ExGntd = false)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE']]
add pattern: !(Cache[2].State = E & ExGntd = false)
CntrlProp_RecvGntE1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntE))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False)]
unsat
CntrlProp_RecvGntE1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntE))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False)]
unsat
CntrlProp_RecvGntE1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntE))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, Chan2[1].Cmd == Chan2[1].Cmd', And(Cache[2].State' == E, Chan2[1].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False)]
unsat
CntrlProp_RecvGntE1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntE))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False)]
unsat
list0: {'CntrlProp_RecvGntE2_1': NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), 'CntrlProp_RecvGntS1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), 'CntrlProp_RecvGntE1_1_RecvGntE2_1': NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), 'CntrlProp_RecvGntE1_1_SendGntE1_1': NegExpr(Cache[2].State = E & ExGntd = false)}
new_inv: !(Cache[1].State = S & Chan2[2].Cmd = GntE)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntS1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), 'CntrlProp_RecvGntE1_1_RecvGntE2_1': NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), 'CntrlProp_RecvGntE1_1_SendGntE1_1': NegExpr(Cache[2].State = E & ExGntd = false)}
CntrlProp_RecvGntE2_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[1].State = S & Chan2[2].Cmd = GntE))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, Chan2[2].Cmd == Chan2[2].Cmd', And(Cache[1].State' == S, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False)]
unsat
CntrlProp_RecvGntE2_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[1].State = S & Chan2[2].Cmd = GntE))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, Cache[1].State == Cache[1].State', And(Cache[1].State' == S, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[1].State = S & Chan2[2].Cmd = GntE))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, Chan2[2].Cmd == Chan2[2].Cmd', And(Cache[1].State' == S, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Cache[1].State' = S,
 Chan2[2].Cmd = GntE,
 Chan2[1].Cmd = GntS,
 Chan2[2].Cmd' = GntE,
 Chan2[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan2[1].Cmd, Chan2[2].Cmd', Chan2[1].Cmd', Cache[1].State', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE']}
1111: [Chan2[1].Cmd == GntS,
 Cache[1].State' == S,
 Chan2[1].Cmd' == Empty,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Cache[1].State' == S, Chan2[2].Cmd' == GntE),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False)]
checkVars: []
solution: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1"
   !(Cache[2].State = S & Cache[1].State = I & Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1"
   !(Cache[1].State = I & Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1"
   !(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1"
   !(Chan2[1].Cmd = GntS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1']
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1']
self.aux_inv: !(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false']]
add pattern: !(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS)
CntrlProp_RecvGntE2_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[1].State = S & Chan2[2].Cmd = GntE))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, Cache[1].State == Cache[1].State', And(Cache[1].State' == S, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS)]
unsat
CntrlProp_RecvGntE2_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[1].State = S & Chan2[2].Cmd = GntE))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Cache[1].State == Cache[1].State', And(Cache[1].State' == S, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS)]
sat
解是：

[Cache[2].State = S,
 Chan2[2].Cmd' = GntE,
 Chan2[2].Cmd = Empty,
 ShrSet[2] = False,
 ExGntd = False,
 Cache[1].State = S,
 CurCmd' = "Empty",
 CurCmd = "ReqE",
 ShrSet[1] = False,
 Cache[1].State' = S,
 ExGntd' = True,
 ShrSet[2]' = True]
invlist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan2[1].Cmd, Cache[1].State', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE']}
1111: [And(CurCmd == "ReqE",
     And(Chan2[2].Cmd == Empty,
         And(ExGntd == False,
             And(ShrSet[2] == False, ShrSet[1] == False)))),
 Chan2[2].Cmd' == GntE,
 ShrSet[2]' == True,
 ExGntd' == True,
 CurCmd' == "Empty",
 Cache[1].State == Cache[1].State',
 And(Cache[1].State' == S, Chan2[2].Cmd' == GntE),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS)]
checkVars: []
solution: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(Cache[2].State = S & Cache[1].State = S & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(Cache[1].State = S & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(Cache[1].State = S & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(Cache[1].State = S & ShrSet[1] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(ShrSet[1] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(Cache[1].State = S & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(Cache[1].State = S & ShrSet[1] = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(ShrSet[1] = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(Cache[1].State = S & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(Cache[1].State = S & ShrSet[1] = false & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(ShrSet[1] = false & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(Cache[1].State = S & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(Cache[1].State = S & ShrSet[1] = false);
No cti found. The invariants are OK.
sublist: [OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(ShrSet[1] = false);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2"
   !(Cache[1].State = S);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2']
self.aux_inv: !(Cache[1].State = S & ShrSet[1] = false)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS']]
add pattern: !(Cache[1].State = S & ShrSet[1] = false)
CntrlProp_RecvGntE2_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[1].State = S & Chan2[2].Cmd = GntE))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", Cache[1].State == Cache[1].State', And(Cache[1].State' == S, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE2_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[1].State = S & Chan2[2].Cmd = GntE))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, Chan2[2].Cmd == Chan2[2].Cmd', And(Cache[1].State' == S, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE2_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[1].State = S & Chan2[2].Cmd = GntE))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, Cache[1].State == Cache[1].State', And(Cache[1].State' == S, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE2_1_SendInv2 {'guard': OpExpr(&, Chan2[2].Cmd = Empty, InvSet[2] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[1].State = S & Chan2[2].Cmd = GntE))}
6. F: [And(Chan2[2].Cmd == Empty,
    And(InvSet[2] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[2].Cmd' == Inv, InvSet[2]' == False, Cache[1].State == Cache[1].State', And(Cache[1].State' == S, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
list0: {'CntrlProp_RecvGntS1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), 'CntrlProp_RecvGntE1_1_RecvGntE2_1': NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), 'CntrlProp_RecvGntE1_1_SendGntE1_1': NegExpr(Cache[2].State = E & ExGntd = false), 'CntrlProp_RecvGntE2_1_RecvGntS1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), 'CntrlProp_RecvGntE2_1_SendGntE2_1': NegExpr(Cache[1].State = S & ShrSet[1] = false)}
new_inv: !(Cache[2].State = E & Chan2[1].Cmd = GntS)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_RecvGntE2_1': NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), 'CntrlProp_RecvGntE1_1_SendGntE1_1': NegExpr(Cache[2].State = E & ExGntd = false), 'CntrlProp_RecvGntE2_1_RecvGntS1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), 'CntrlProp_RecvGntE2_1_SendGntE2_1': NegExpr(Cache[1].State = S & ShrSet[1] = false)}
CntrlProp_RecvGntS1_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntS))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntS1_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntS))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', And(Cache[2].State' == E, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntS1_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntS))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntS1_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntS))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', And(Cache[2].State' == E, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntS1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntS))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntS1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntS))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntS1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntS))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntS1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntS))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, Chan2[1].Cmd == Chan2[1].Cmd', And(Cache[2].State' == E, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntS1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = GntS))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
list0: {'CntrlProp_RecvGntE1_1_RecvGntE2_1': NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), 'CntrlProp_RecvGntE1_1_SendGntE1_1': NegExpr(Cache[2].State = E & ExGntd = false), 'CntrlProp_RecvGntE2_1_RecvGntS1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), 'CntrlProp_RecvGntE2_1_SendGntE2_1': NegExpr(Cache[1].State = S & ShrSet[1] = false)}
new_inv: !(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_SendGntE1_1': NegExpr(Cache[2].State = E & ExGntd = false), 'CntrlProp_RecvGntE2_1_RecvGntS1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), 'CntrlProp_RecvGntE2_1_SendGntE2_1': NegExpr(Cache[1].State = S & ShrSet[1] = false)}
CntrlProp_RecvGntE1_1_RecvGntE2_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan2[1].Cmd' = GntE,
 Chan2[2].Cmd = GntE,
 ShrSet[2] = False,
 ExGntd = False,
 Chan2[1].Cmd = Empty,
 CurCmd' = "Empty",
 ShrSet[1]' = True,
 CurCmd = "ReqE",
 ShrSet[1] = False,
 ExGntd' = True,
 Chan2[2].Cmd' = GntE]
invlist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan2[1].Cmd, Chan2[2].Cmd', Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE']}
1111: [And(CurCmd == "ReqE",
     And(Chan2[1].Cmd == Empty,
         And(ExGntd == False,
             And(ShrSet[2] == False, ShrSet[1] == False)))),
 Chan2[1].Cmd' == GntE,
 ShrSet[1]' == True,
 ExGntd' == True,
 CurCmd' == "Empty",
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False)]
checkVars: []
solution: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(Cache[2].State = S & Cache[1].State = I & Chan2[2].Cmd = GntE & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(Cache[1].State = I & Chan2[2].Cmd = GntE & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(Chan2[2].Cmd = GntE & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(Chan2[2].Cmd = GntE & ShrSet[2] = false & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(ShrSet[2] = false & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(Chan2[2].Cmd = GntE & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(Chan2[2].Cmd = GntE & ExGntd = false & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(ExGntd = false & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(Chan2[2].Cmd = GntE & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1']
sublist: [OpExpr(=, ExGntd, false), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, ExGntd, false), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(Chan2[2].Cmd = GntE & ExGntd = false);
No cti found. The invariants are OK.
sublist: [OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(ExGntd = false);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1']
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1']
self.aux_inv: !(Chan2[2].Cmd = GntE & ExGntd = false)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false']]
add pattern: !(Chan2[2].Cmd = GntE & ExGntd = false)
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan2[2].Cmd' = GntE,
 Chan2[1].Cmd = GntE,
 Chan2[2].Cmd = Empty,
 ShrSet[2] = False,
 ExGntd = False,
 CurCmd' = "Empty",
 CurCmd = "ReqE",
 ShrSet[1] = False,
 Chan2[1].Cmd' = GntE,
 ExGntd' = True,
 ShrSet[2]' = True]
invlist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE']}
1111: [And(CurCmd == "ReqE",
     And(Chan2[2].Cmd == Empty,
         And(ExGntd == False,
             And(ShrSet[2] == False, ShrSet[1] == False)))),
 Chan2[2].Cmd' == GntE,
 ShrSet[2]' == True,
 ExGntd' == True,
 CurCmd' == "Empty",
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
checkVars: []
solution: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(Cache[2].State = S & Cache[1].State = I & Chan2[1].Cmd = GntE & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(Cache[1].State = I & Chan2[1].Cmd = GntE & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(Chan2[1].Cmd = GntE & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[1].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(Chan2[1].Cmd = GntE & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(Chan2[1].Cmd = GntE & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan2[1].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan2[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(Chan2[1].Cmd = GntE & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(Chan2[1].Cmd = GntE & ExGntd = false & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(ExGntd = false & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(Chan2[1].Cmd = GntE & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, GntE)]
inv_list [OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(Chan2[1].Cmd = GntE & ExGntd = false);
No cti found. The invariants are OK.
sublist: [OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(ExGntd = false);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2']
sublist: [OpExpr(=, Chan2[1].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2"
   !(Chan2[1].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE2']
self.aux_inv: !(Chan2[1].Cmd = GntE & ExGntd = false)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false']]
exist self.aux_inv: !(Chan2[1].Cmd = GntE & ExGntd = false)
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendInv2 {'guard': OpExpr(&, Chan2[2].Cmd = Empty, InvSet[2] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE))}
6. F: [And(Chan2[2].Cmd == Empty,
    And(InvSet[2] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[2].Cmd' == Inv, InvSet[2]' == False, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == GntE, Chan2[2].Cmd' == GntE), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
unsat
list0: {'CntrlProp_RecvGntE1_1_SendGntE1_1': NegExpr(Cache[2].State = E & ExGntd = false), 'CntrlProp_RecvGntE2_1_RecvGntS1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), 'CntrlProp_RecvGntE2_1_SendGntE2_1': NegExpr(Cache[1].State = S & ShrSet[1] = false), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1': NegExpr(Chan2[2].Cmd = GntE & ExGntd = false)}
new_inv: !(Cache[2].State = E & ExGntd = false)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_RecvGntS1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), 'CntrlProp_RecvGntE2_1_SendGntE2_1': NegExpr(Cache[1].State = S & ShrSet[1] = false), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1': NegExpr(Chan2[2].Cmd = GntE & ExGntd = false)}
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(Cache[2].State = E & ExGntd = false))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, ExGntd == ExGntd', And(Cache[2].State' == E, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(Cache[2].State = E & ExGntd = false))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, ExGntd == ExGntd', And(Cache[2].State' == E, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & ExGntd = false))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Cache[2].State == Cache[2].State', And(Cache[2].State' == E, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & ExGntd = false))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Cache[2].State == Cache[2].State', And(Cache[2].State' == E, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & ExGntd = false))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
sat
解是：

[Cache[1].State = I,
 Chan2[1].Cmd = Empty,
 CurCmd = "",
 ShrSet[1]' = False,
 Cache[2].State' = E,
 Chan3[1].Cmd = InvAck,
 ExGntd = True,
 ExGntd' = False,
 Chan3[1].Cmd' = Empty,
 Cache[2].State = E]
invlist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Cache[2].State', Chan2[1].Cmd, Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE']}
1111: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False)]
checkVars: []
solution: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11"
   !(Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11"
   !(Cache[2].State = E & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11"
   !(ExGntd = true & Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11"
   !(Cache[2].State = E & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11']
self.aux_inv: !(Cache[2].State = E & Chan3[1].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false']]
add pattern: !(Cache[2].State = E & Chan3[1].Cmd = InvAck)
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & ExGntd = false))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, ExGntd' == False, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck)]
sat
解是：

[Cache[1].State = I,
 Chan2[1].Cmd = Empty,
 Chan3[1].Cmd = Empty,
 CurCmd = "",
 Cache[2].State' = E,
 Cache[2].State = E,
 Chan3[2].Cmd' = Empty,
 ExGntd = True,
 Chan3[2].Cmd = InvAck,
 ExGntd' = False,
 ShrSet[2]' = False]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan3[2].Cmd, Cache[2].State', Chan2[1].Cmd, Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck)]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: Empty <class 'z3.z3.DatatypeRef'>
add:
Chan3[1].Cmd != Empty
2222: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty]
解是：

[ShrSet[2]' = False,
 ExGntd' = False,
 Cache[2].State = E,
 Chan3[1].Cmd = ReqS,
 CurCmd = "",
 Cache[1].State = I,
 Chan3[2].Cmd = InvAck,
 ExGntd = True,
 Chan3[2].Cmd' = Empty,
 Cache[2].State' = E,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd = Empty]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan3[2].Cmd, Cache[2].State', Chan2[1].Cmd, Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: ReqS <class 'z3.z3.DatatypeRef'>
add:
Chan3[1].Cmd != ReqS
2222: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS]
解是：

[ShrSet[2]' = False,
 ExGntd' = False,
 Cache[2].State = E,
 Chan3[1].Cmd = ReqE,
 CurCmd = "",
 Cache[1].State = I,
 Chan3[2].Cmd = InvAck,
 ExGntd = True,
 Chan3[2].Cmd' = Empty,
 Cache[2].State' = E,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd = Empty]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan3[2].Cmd, Cache[2].State', Chan2[1].Cmd, Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: ReqE <class 'z3.z3.DatatypeRef'>
add:
Chan3[1].Cmd != ReqE
2222: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE]
解是：

[ShrSet[2]' = False,
 ExGntd' = False,
 Cache[2].State = E,
 Chan3[1].Cmd = Inv,
 CurCmd = "",
 Cache[1].State = I,
 Chan3[2].Cmd = InvAck,
 ExGntd = True,
 Chan3[2].Cmd' = Empty,
 Cache[2].State' = E,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd = Empty]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan3[2].Cmd, Cache[2].State', Chan2[1].Cmd, Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: Inv <class 'z3.z3.DatatypeRef'>
add:
Chan3[1].Cmd != Inv
2222: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE,
 Chan3[1].Cmd != Inv]
解是：

[ShrSet[2]' = False,
 ExGntd' = False,
 Cache[2].State = E,
 Chan3[1].Cmd = GntS,
 CurCmd = "",
 Cache[1].State = I,
 Chan3[2].Cmd = InvAck,
 ExGntd = True,
 Chan3[2].Cmd' = Empty,
 Cache[2].State' = E,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd = Empty]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, GntS)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan3[2].Cmd, Cache[2].State', Chan2[1].Cmd, Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE,
 Chan3[1].Cmd != Inv]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: GntS <class 'z3.z3.DatatypeRef'>
add:
Chan3[1].Cmd != GntS
2222: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE,
 Chan3[1].Cmd != Inv,
 Chan3[1].Cmd != GntS]
解是：

[ShrSet[2]' = False,
 ExGntd' = False,
 Cache[2].State = E,
 Chan3[1].Cmd = GntE,
 CurCmd = "",
 Cache[1].State = I,
 Chan3[2].Cmd = InvAck,
 ExGntd = True,
 Chan3[2].Cmd' = Empty,
 Cache[2].State' = E,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd = Empty]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, GntE)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan3[2].Cmd, Cache[2].State', Chan2[1].Cmd, Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE,
 Chan3[1].Cmd != Inv,
 Chan3[1].Cmd != GntS]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: GntE <class 'z3.z3.DatatypeRef'>
add:
Chan3[1].Cmd != GntE
2222: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE,
 Chan3[1].Cmd != Inv,
 Chan3[1].Cmd != GntS,
 Chan3[1].Cmd != GntE]
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[1].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(ExGntd = true & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
self.aux_inv: !(Cache[2].State = E & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Cache[2].State = E & Chan3[2].Cmd = InvAck)
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(ExGntd = true & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
self.aux_inv: !(Cache[2].State = E & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Cache[2].State = E & Chan3[2].Cmd = InvAck)
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(ExGntd = true & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
self.aux_inv: !(Cache[2].State = E & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Cache[2].State = E & Chan3[2].Cmd = InvAck)
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(ExGntd = true & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
self.aux_inv: !(Cache[2].State = E & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Cache[2].State = E & Chan3[2].Cmd = InvAck)
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[1].Cmd = GntS & Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(ExGntd = true & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
self.aux_inv: !(Cache[2].State = E & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Cache[2].State = E & Chan3[2].Cmd = InvAck)
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[1].Cmd = GntE & Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[1].State = I & Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(ExGntd = true & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck12']
self.aux_inv: !(Cache[2].State = E & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Cache[2].State = E & Chan3[2].Cmd = InvAck)
CntrlProp_RecvGntE1_1_SendGntE1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(Cache[2].State = E & ExGntd = false))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, ExGntd == ExGntd', And(Cache[2].State' == E, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck)]
unsat
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), 'CntrlProp_RecvGntE2_1_SendGntE2_1': NegExpr(Cache[1].State = S & ShrSet[1] = false), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1': NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck)}
new_inv: !(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_SendGntE2_1': NegExpr(Cache[1].State = S & ShrSet[1] = false), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1': NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck)}
CntrlProp_RecvGntE2_1_RecvGntS1_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan2[2].Cmd' = GntE,
 Chan2[1].Cmd = GntS,
 Chan2[2].Cmd = Empty,
 ShrSet[2] = False,
 ExGntd = False,
 CurCmd' = "Empty",
 CurCmd = "ReqE",
 ShrSet[1] = False,
 Chan2[1].Cmd' = GntS,
 ExGntd' = True,
 ShrSet[2]' = True]
invlist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck']}
1111: [And(CurCmd == "ReqE",
     And(Chan2[2].Cmd == Empty,
         And(ExGntd == False,
             And(ShrSet[2] == False, ShrSet[1] == False)))),
 Chan2[2].Cmd' == GntE,
 ShrSet[2]' == True,
 ExGntd' == True,
 CurCmd' == "Empty",
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck)]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: None <class 'NoneType'>
solution: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(Cache[2].State = S & Cache[1].State = I & Chan2[1].Cmd = GntS & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(Cache[1].State = I & Chan2[1].Cmd = GntS & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(Chan2[1].Cmd = GntS & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(Chan2[1].Cmd = GntS & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(Chan2[1].Cmd = GntS & ShrSet[1] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(ShrSet[1] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(Chan2[1].Cmd = GntS & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(Chan2[1].Cmd = GntS & ShrSet[1] = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(ShrSet[1] = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(Chan2[1].Cmd = GntS & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(Chan2[1].Cmd = GntS & ShrSet[1] = false & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(ShrSet[1] = false & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(Chan2[1].Cmd = GntS & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2']
sublist: [OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, ShrSet[1], false), OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(Chan2[1].Cmd = GntS & ShrSet[1] = false);
No cti found. The invariants are OK.
sublist: [OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(ShrSet[1] = false);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2']
sublist: [OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2"
   !(Chan2[1].Cmd = GntS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2']
self.aux_inv: !(Chan2[1].Cmd = GntS & ShrSet[1] = false)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck']]
add pattern: !(Chan2[1].Cmd = GntS & ShrSet[1] = false)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendInv2 {'guard': OpExpr(&, Chan2[2].Cmd = Empty, InvSet[2] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS))}
6. F: [And(Chan2[2].Cmd == Empty,
    And(InvSet[2] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[2].Cmd' == Inv, InvSet[2]' == False, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == GntS), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False)]
unsat
list0: {'CntrlProp_RecvGntE2_1_SendGntE2_1': NegExpr(Cache[1].State = S & ShrSet[1] = false), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1': NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1': NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false)}
new_inv: !(Cache[1].State = S & ShrSet[1] = false)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1': NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1': NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false)}
CntrlProp_RecvGntE2_1_SendGntE2_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Cache[1].State = S & ShrSet[1] = false))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, ShrSet[1] == ShrSet[1]', And(Cache[1].State' == S, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE2_1_SendGntE2_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Cache[1].State = S & ShrSet[1] = false))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, ShrSet[1] == ShrSet[1]', And(Cache[1].State' == S, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE2_1_SendGntE2_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[1].State = S & ShrSet[1] = false))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Cache[1].State == Cache[1].State', And(Cache[1].State' == S, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE2_1_SendGntE2_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[1].State = S & ShrSet[1] = false))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Cache[1].State == Cache[1].State', And(Cache[1].State' == S, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[1].State = S & ShrSet[1] = false))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, Cache[1].State == Cache[1].State', And(Cache[1].State' == S, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False)]
sat
解是：

[Cache[2].State = I,
 CurCmd = "",
 Chan2[2].Cmd = Empty,
 Cache[1].State' = S,
 ExGntd = True,
 Chan3[1].Cmd' = Empty,
 Cache[1].State = S,
 ShrSet[1]' = False,
 ShrSet[1] = True,
 Chan3[1].Cmd = InvAck,
 ExGntd' = False]
invlist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Cache[1].State', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck']}
1111: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Cache[1].State == Cache[1].State',
 And(Cache[1].State' == S, ShrSet[1]' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False)]
checkVars: []
solution: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = S & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = S & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, S), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11"
   !(Cache[2].State = I & Cache[1].State = S & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11"
   !(Cache[1].State = S & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11"
   !(ExGntd = true & Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11"
   !(Cache[1].State = S & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11']
sublist: [OpExpr(=, Cache[1].State, S)]
inv_list [OpExpr(=, Cache[1].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11"
   !(Cache[1].State = S);
counter_ex: ['CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11']
self.aux_inv: !(Cache[1].State = S & Chan3[1].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false']]
add pattern: !(Cache[1].State = S & Chan3[1].Cmd = InvAck)
CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[1].State = S & ShrSet[1] = false))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, Cache[1].State == Cache[1].State', And(Cache[1].State' == S, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE2_1_SendGntE2_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Cache[1].State = S & ShrSet[1] = false))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, ShrSet[1] == ShrSet[1]', And(Cache[1].State' == S, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck)]
unsat
list0: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1': NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1': NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), 'CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck)}
new_inv: !(Chan2[2].Cmd = GntE & ExGntd = false)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1': NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), 'CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck)}
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ExGntd = false))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, ExGntd == ExGntd', And(Chan2[2].Cmd' == GntE, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ExGntd = false))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, ExGntd == ExGntd', And(Chan2[2].Cmd' == GntE, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ExGntd = false))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ExGntd = false))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", And(Chan2[2].Cmd' == GntE, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ExGntd = false))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", ExGntd == ExGntd', And(Chan2[2].Cmd' == GntE, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ExGntd = false))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan2[1].Cmd = Empty,
 CurCmd = "",
 Chan2[2].Cmd' = GntE,
 ShrSet[1]' = False,
 Chan2[2].Cmd = GntE,
 Chan3[1].Cmd = InvAck,
 ExGntd = True,
 ExGntd' = False,
 Chan3[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck']}
1111: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck)]
checkVars: []
solution: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11"
   !(Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11"
   !(Chan2[2].Cmd = GntE & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11"
   !(ExGntd = true & Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11"
   !(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11']
self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck']]
add pattern: !(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck)
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ExGntd = false))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, ExGntd' == False, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck)]
sat
解是：

[Cache[1].State = I,
 Chan2[1].Cmd = Empty,
 Chan3[1].Cmd = Empty,
 CurCmd = "",
 Cache[2].State = I,
 Chan2[2].Cmd' = GntE,
 Chan2[2].Cmd = GntE,
 Chan3[2].Cmd' = Empty,
 ExGntd = True,
 Chan3[2].Cmd = InvAck,
 ExGntd' = False,
 ShrSet[2]' = False]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan2[2].Cmd', Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck)]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: Empty <class 'z3.z3.DatatypeRef'>
add:
Chan3[1].Cmd != Empty
2222: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty]
解是：

[ShrSet[2]' = False,
 ExGntd' = False,
 Cache[2].State = I,
 Chan3[1].Cmd = ReqS,
 CurCmd = "",
 Cache[1].State = I,
 Chan3[2].Cmd = InvAck,
 ExGntd = True,
 Chan3[2].Cmd' = Empty,
 Chan2[2].Cmd = GntE,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd' = GntE]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan2[2].Cmd', Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: ReqS <class 'z3.z3.DatatypeRef'>
add:
Chan3[1].Cmd != ReqS
2222: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS]
解是：

[ShrSet[2]' = False,
 ExGntd' = False,
 Cache[2].State = I,
 Chan3[1].Cmd = ReqE,
 CurCmd = "",
 Cache[1].State = I,
 Chan3[2].Cmd = InvAck,
 ExGntd = True,
 Chan3[2].Cmd' = Empty,
 Chan2[2].Cmd = GntE,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd' = GntE]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan2[2].Cmd', Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: ReqE <class 'z3.z3.DatatypeRef'>
add:
Chan3[1].Cmd != ReqE
2222: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE]
解是：

[ShrSet[2]' = False,
 ExGntd' = False,
 Cache[2].State = I,
 Chan3[1].Cmd = Inv,
 CurCmd = "",
 Cache[1].State = I,
 Chan3[2].Cmd = InvAck,
 ExGntd = True,
 Chan3[2].Cmd' = Empty,
 Chan2[2].Cmd = GntE,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd' = GntE]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan2[2].Cmd', Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: Inv <class 'z3.z3.DatatypeRef'>
add:
Chan3[1].Cmd != Inv
2222: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE,
 Chan3[1].Cmd != Inv]
解是：

[ShrSet[2]' = False,
 ExGntd' = False,
 Cache[2].State = I,
 Chan3[1].Cmd = GntS,
 CurCmd = "",
 Cache[1].State = I,
 Chan3[2].Cmd = InvAck,
 ExGntd = True,
 Chan3[2].Cmd' = Empty,
 Chan2[2].Cmd = GntE,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd' = GntE]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, GntS)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan2[2].Cmd', Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE,
 Chan3[1].Cmd != Inv]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: GntS <class 'z3.z3.DatatypeRef'>
add:
Chan3[1].Cmd != GntS
2222: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE,
 Chan3[1].Cmd != Inv,
 Chan3[1].Cmd != GntS]
解是：

[ShrSet[2]' = False,
 ExGntd' = False,
 Cache[2].State = I,
 Chan3[1].Cmd = GntE,
 CurCmd = "",
 Cache[1].State = I,
 Chan3[2].Cmd = InvAck,
 ExGntd = True,
 Chan3[2].Cmd' = Empty,
 Chan2[2].Cmd = GntE,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd' = GntE]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, GntE)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan2[2].Cmd', Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE,
 Chan3[1].Cmd != Inv,
 Chan3[1].Cmd != GntS]
checkVars: [Chan3[1].Cmd]
model[cti[str(vars)][0]]: GntE <class 'z3.z3.DatatypeRef'>
add:
Chan3[1].Cmd != GntE
2222: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, ExGntd' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Chan3[1].Cmd != Empty,
 Chan3[1].Cmd != ReqS,
 Chan3[1].Cmd != ReqE,
 Chan3[1].Cmd != Inv,
 Chan3[1].Cmd != GntS,
 Chan3[1].Cmd != GntE]
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[1].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(ExGntd = true & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck)
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(ExGntd = true & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck)
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(ExGntd = true & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck)
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(ExGntd = true & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck)
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[1].Cmd = GntS & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(ExGntd = true & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck)
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[1].Cmd = GntE & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE & ExGntd = true & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(ExGntd = true & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck12']
self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Chan2[2].Cmd = GntE & Chan3[2].Cmd = InvAck)
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ExGntd = false))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, ExGntd == ExGntd', And(Chan2[2].Cmd' == GntE, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_SendInv2 {'guard': OpExpr(&, Chan2[2].Cmd = Empty, InvSet[2] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ExGntd = false))}
6. F: [And(Chan2[2].Cmd == Empty,
    And(InvSet[2] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[2].Cmd' == Inv, InvSet[2]' == False, ExGntd == ExGntd', And(Chan2[2].Cmd' == GntE, ExGntd' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck)]
unsat
list0: {'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1': NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), 'CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck)}
new_inv: !(Cache[2].State = E & Chan3[1].Cmd = InvAck)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1': NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), 'CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck)}
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[2].State = E & Chan3[1].Cmd = InvAck))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, Chan3[1].Cmd == Chan3[1].Cmd', And(Cache[2].State' == E, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[2].State = E & Chan3[1].Cmd = InvAck))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, Chan3[1].Cmd == Chan3[1].Cmd', And(Cache[2].State' == E, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck)]
sat
解是：

[Cache[1].State = I,
 Cache[1].State' = I,
 ExGntd = True,
 Chan2[1].Cmd = Inv,
 Cache[2].State' = E,
 Chan3[1].Cmd' = InvAck,
 Chan3[1].Cmd = Empty,
 Chan2[1].Cmd' = Empty,
 Cache[2].State = E]
invlist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, ExGntd, true)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Cache[2].State', Chan2[1].Cmd, Cache[1].State', Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty),
 Chan2[1].Cmd' == Empty,
 Chan3[1].Cmd' == InvAck,
 Cache[1].State' == I,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, Chan3[1].Cmd' == InvAck),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck)]
checkVars: []
solution: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(ExGntd = true & Cache[1].State = I & Cache[2].State = E & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Cache[1].State = I & Cache[2].State = E & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Cache[2].State = E & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Cache[2].State = E & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1']
self.aux_inv: !(Cache[2].State = E & Chan2[1].Cmd = Inv)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck']]
add pattern: !(Cache[2].State = E & Chan2[1].Cmd = Inv)
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[2].State = E & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, Chan3[1].Cmd == Chan3[1].Cmd', And(Cache[2].State' == E, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv)]
unsat
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1': NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), 'CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv)}
new_inv: !(Chan2[1].Cmd = GntS & ShrSet[1] = false)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv)}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & ShrSet[1] = false))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, ShrSet[1] == ShrSet[1]', And(Chan2[1].Cmd' == GntS, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & ShrSet[1] = false))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, ShrSet[1] == ShrSet[1]', And(Chan2[1].Cmd' == GntS, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & ShrSet[1] = false))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", And(Chan2[1].Cmd' == GntS, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & ShrSet[1] = false))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", And(Chan2[1].Cmd' == GntS, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & ShrSet[1] = false))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == GntS, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 CurCmd = "",
 Chan2[2].Cmd = Empty,
 Chan2[1].Cmd' = GntS,
 Chan2[1].Cmd = GntS,
 ExGntd = True,
 Chan3[1].Cmd' = Empty,
 ShrSet[1]' = False,
 ShrSet[1] = True,
 Chan3[1].Cmd = InvAck,
 ExGntd' = False]
invlist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(Chan2[1].Cmd' == GntS, ShrSet[1]' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv)]
checkVars: []
solution: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = GntS & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = GntS & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = GntS & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, GntS), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11"
   !(Cache[1].State = I & Chan2[1].Cmd = GntS & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11"
   !(Chan2[1].Cmd = GntS & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11"
   !(ExGntd = true & Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11"
   !(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11']
sublist: [OpExpr(=, Chan2[1].Cmd, GntS)]
inv_list [OpExpr(=, Chan2[1].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11"
   !(Chan2[1].Cmd = GntS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11']
self.aux_inv: !(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv']]
add pattern: !(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & ShrSet[1] = false))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == GntS, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & ShrSet[1] = false))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, ShrSet[1] == ShrSet[1]', And(Chan2[1].Cmd' == GntS, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & ShrSet[1] = false))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, ShrSet[1] == ShrSet[1]', And(Chan2[1].Cmd' == GntS, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck)]
unsat
list0: {'CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck)}
new_inv: !(Cache[1].State = S & Chan3[1].Cmd = InvAck)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck)}
CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[1].State = S & Chan3[1].Cmd = InvAck))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, Chan3[1].Cmd == Chan3[1].Cmd', And(Cache[1].State' == S, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[1].State = S & Chan3[1].Cmd = InvAck))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, Chan3[1].Cmd == Chan3[1].Cmd', And(Cache[1].State' == S, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[1].State = S & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, Cache[1].State == Cache[1].State', And(Cache[1].State' == S, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[1].State = S & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, Cache[1].State == Cache[1].State', And(Cache[1].State' == S, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE2_1_SendGntE2_1_RecvInvAck11_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [], '!inv': NegExpr(!(Cache[1].State = S & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, And(Cache[1].State' == S, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck)]
unsat
list0: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1': NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck)}
new_inv: !(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck)}
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd' = GntE,
 Chan2[2].Cmd = Empty,
 ShrSet[2] = False,
 ExGntd = False,
 Chan3[1].Cmd' = InvAck,
 CurCmd' = "Empty",
 Chan3[1].Cmd = InvAck,
 CurCmd = "ReqE",
 ShrSet[1] = False,
 ExGntd' = True,
 ShrSet[2]' = True]
invlist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck']}
1111: [And(CurCmd == "ReqE",
     And(Chan2[2].Cmd == Empty,
         And(ExGntd == False,
             And(ShrSet[2] == False, ShrSet[1] == False)))),
 Chan2[2].Cmd' == GntE,
 ShrSet[2]' == True,
 ExGntd' == True,
 CurCmd' == "Empty",
 Chan3[1].Cmd == Chan3[1].Cmd',
 And(Chan2[2].Cmd' == GntE, Chan3[1].Cmd' == InvAck),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck)]
checkVars: []
solution: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Chan2[1].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan3[1].Cmd = InvAck & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Cache[2].State = S & Cache[1].State = I & Chan3[1].Cmd = InvAck & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Cache[1].State = I & Chan3[1].Cmd = InvAck & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Chan3[1].Cmd = InvAck & ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(ShrSet[1] = false & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Chan3[1].Cmd = InvAck & ShrSet[2] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Chan3[1].Cmd = InvAck & ShrSet[1] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(ShrSet[1] = false & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Chan3[1].Cmd = InvAck & ExGntd = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Chan3[1].Cmd = InvAck & ShrSet[1] = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(ShrSet[1] = false & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Chan3[1].Cmd = InvAck & Chan2[2].Cmd = Empty & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Chan3[1].Cmd = InvAck & ShrSet[1] = false & CurCmd = ReqE);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(ShrSet[1] = false & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2']
sublist: [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Chan3[1].Cmd = InvAck & CurCmd = ReqE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2']
sublist: [OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, ShrSet[1], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Chan3[1].Cmd = InvAck & ShrSet[1] = false);
No cti found. The invariants are OK.
sublist: [OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(ShrSet[1] = false);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2']
self.aux_inv: !(Chan3[1].Cmd = InvAck & ShrSet[1] = false)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck']]
add pattern: !(Chan3[1].Cmd = InvAck & ShrSet[1] = false)
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Cache[1].State' = I,
 Chan2[2].Cmd = GntE,
 ExGntd = True,
 Chan2[1].Cmd = Inv,
 Chan3[1].Cmd' = InvAck,
 Chan3[1].Cmd = Empty,
 Chan2[1].Cmd' = Empty,
 Chan2[2].Cmd' = GntE]
invlist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, ExGntd, true)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Cache[1].State', Chan2[1].Cmd', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty),
 Chan2[1].Cmd' == Empty,
 Chan3[1].Cmd' == InvAck,
 Cache[1].State' == I,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, Chan3[1].Cmd' == InvAck),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False)]
checkVars: []
solution: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(ExGntd = true & Cache[2].State = S & Cache[1].State = I & Chan2[2].Cmd = GntE & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Cache[2].State = S & Cache[1].State = I & Chan2[2].Cmd = GntE & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Cache[1].State = I & Chan2[2].Cmd = GntE & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Chan2[2].Cmd = GntE & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1']
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1']
self.aux_inv: !(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false']]
add pattern: !(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv)
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInv2 {'guard': OpExpr(&, Chan2[2].Cmd = Empty, InvSet[2] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan2[2].Cmd == Empty,
    And(InvSet[2] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[2].Cmd' == Inv, InvSet[2]' == False, Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv)]
unsat
list0: {'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1': NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv)}
new_inv: !(Cache[2].State = E & Chan2[1].Cmd = Inv)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1': NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv)}
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = Inv))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', And(Cache[2].State' == E, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = Inv))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', And(Cache[2].State' == E, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, Chan2[1].Cmd == Chan2[1].Cmd', And(Cache[2].State' == E, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv)]
sat
解是：

[Cache[1].State = I,
 Chan3[1].Cmd = Empty,
 CurCmd = "ReqE",
 InvSet[1] = True,
 ExGntd = True,
 InvSet[1]' = False,
 Chan2[1].Cmd = Empty,
 Cache[2].State' = E,
 Cache[2].State = E,
 Chan2[1].Cmd' = Inv]
invlist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan3[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Cache[2].State', Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan2[1].Cmd == Empty,
     And(InvSet[1] == True,
         Or(CurCmd == "ReqE",
            And(CurCmd == "ReqS", ExGntd == True)))),
 Chan2[1].Cmd' == Inv,
 InvSet[1]' == False,
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv)]
checkVars: []
solution: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Chan3[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ExGntd = true & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Cache[1].State = I & Cache[2].State = E & ExGntd = true & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Cache[2].State = E & ExGntd = true & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(ExGntd = true & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Cache[2].State = E & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Cache[2].State = E & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Cache[2].State = E & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, InvSet[1], true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, InvSet[1], true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Cache[2].State = E & InvSet[1] = true);
No cti found. The invariants are OK.
sublist: [OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(InvSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1']
self.aux_inv: !(Cache[2].State = E & InvSet[1] = true)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv']]
add pattern: !(Cache[2].State = E & InvSet[1] = true)
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1': NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Cache[2].State = E & InvSet[1] = true)}
new_inv: !(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1': NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Cache[2].State = E & InvSet[1] = true)}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[1].Cmd' == GntS, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[1].Cmd' == GntS, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[1].Cmd' == GntS, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[1].Cmd' == GntS, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan2[2].Cmd = Empty,
 Chan2[1].Cmd' = GntS,
 ExGntd = False,
 Chan2[1].Cmd = Empty,
 Chan3[1].Cmd' = InvAck,
 ShrSet[1] = True,
 CurCmd' = "Empty",
 ShrSet[1]' = True,
 CurCmd = "ReqS",
 Chan3[1].Cmd = InvAck]
invlist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck']}
1111: [And(CurCmd == "ReqS",
     And(Chan2[1].Cmd == Empty, ExGntd == False)),
 Chan2[1].Cmd' == GntS,
 ShrSet[1]' == True,
 CurCmd' == "Empty",
 Chan3[1].Cmd == Chan3[1].Cmd',
 And(Chan2[1].Cmd' == GntS, Chan3[1].Cmd' == InvAck),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True)]
checkVars: []
solution: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan3[1].Cmd = InvAck & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1"
   !(Chan2[2].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan3[1].Cmd = InvAck & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1"
   !(Cache[2].State = S & Cache[1].State = I & Chan3[1].Cmd = InvAck & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1"
   !(Cache[1].State = I & Chan3[1].Cmd = InvAck & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1"
   !(Chan3[1].Cmd = InvAck & ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1"
   !(ExGntd = false & Chan2[1].Cmd = Empty & CurCmd = ReqS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1']
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1"
   !(Chan3[1].Cmd = InvAck & Chan2[1].Cmd = Empty & CurCmd = ReqS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1']
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1"
   !(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1"
   !(ExGntd = false & CurCmd = ReqS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1']
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1"
   !(Chan3[1].Cmd = InvAck & CurCmd = ReqS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1']
sublist: [OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1"
   !(Chan3[1].Cmd = InvAck & ExGntd = false);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1']
self.aux_inv: !(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true']]
add pattern: !(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == GntS, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS"))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == GntS, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS"))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, And(Chan2[1].Cmd' == GntS, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS"))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[1].Cmd' == GntS, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS"))]
unsat
list0: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1': NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Cache[2].State = E & InvSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1': NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS)}
new_inv: !(Chan3[1].Cmd = InvAck & ShrSet[1] = false)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Cache[2].State = E & InvSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1': NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS)}
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ShrSet[1] = false))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS"))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ShrSet[1] = false))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS"))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ShrSet[1] = false))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, And(Chan3[1].Cmd' == InvAck, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS"))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ShrSet[1] = false))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, And(Chan3[1].Cmd' == InvAck, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS"))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ShrSet[1] = false))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, ShrSet[1] == ShrSet[1]', And(Chan3[1].Cmd' == InvAck, ShrSet[1]' == False), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS"))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan2[2].Cmd = Empty,
 Chan2[1].Cmd' = Empty,
 ShrSet[1]' = False,
 ShrSet[1] = False,
 Chan3[1].Cmd = Empty,
 Chan2[1].Cmd = Inv,
 Chan3[1].Cmd' = InvAck,
 Cache[1].State' = I]
invlist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, ShrSet[1], Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Cache[1].State', Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty),
 Chan2[1].Cmd' == Empty,
 Chan3[1].Cmd' == InvAck,
 Cache[1].State' == I,
 ShrSet[1] == ShrSet[1]',
 And(Chan3[1].Cmd' == InvAck, ShrSet[1]' == False),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS"))]
checkVars: []
solution: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1"
   !(Chan2[2].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & ShrSet[1] = false & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1"
   !(Cache[2].State = S & Cache[1].State = I & ShrSet[1] = false & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1"
   !(Cache[1].State = I & ShrSet[1] = false & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1"
   !(ShrSet[1] = false & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1"
   !(Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1"
   !(ShrSet[1] = false & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1"
   !(Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1']
sublist: [OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1"
   !(ShrSet[1] = false);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1']
self.aux_inv: !(ShrSet[1] = false & Chan2[1].Cmd = Inv)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS']]
add pattern: !(ShrSet[1] = false & Chan2[1].Cmd = Inv)
list0: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1': NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Cache[2].State = E & InvSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1': NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1': NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv)}
new_inv: !(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Cache[2].State = E & InvSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1': NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1': NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv)}
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan3[1].Cmd = Empty,
 CurCmd = "ReqE",
 InvSet[1] = True,
 ExGntd = True,
 Chan2[2].Cmd = GntE,
 InvSet[1]' = False,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd' = GntE,
 Chan2[1].Cmd' = Inv]
invlist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan3[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan2[1].Cmd, Chan2[2].Cmd', Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan2[1].Cmd == Empty,
     And(InvSet[1] == True,
         Or(CurCmd == "ReqE",
            And(CurCmd == "ReqS", ExGntd == True)))),
 Chan2[1].Cmd' == Inv,
 InvSet[1]' == False,
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv)]
checkVars: []
solution: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Chan3[1].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Cache[2].State = S & Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Cache[1].State = I & Chan2[2].Cmd = GntE & ExGntd = true & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Chan2[2].Cmd = GntE & ExGntd = true & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(ExGntd = true & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Chan2[2].Cmd = GntE & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Chan2[2].Cmd = GntE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, InvSet[1], true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, InvSet[1], true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Chan2[2].Cmd = GntE & InvSet[1] = true);
No cti found. The invariants are OK.
sublist: [OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(InvSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1']
self.aux_inv: !(Chan2[2].Cmd = GntE & InvSet[1] = true)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv']]
add pattern: !(Chan2[2].Cmd = GntE & InvSet[1] = true)
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv2 {'guard': OpExpr(&, Chan2[2].Cmd = Empty, InvSet[2] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[2].Cmd == Empty,
    And(InvSet[2] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[2].Cmd' == Inv, InvSet[2]' == False, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[2].Cmd' == GntE, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True)]
unsat
list0: {'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Cache[2].State = E & InvSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1': NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1': NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true)}
new_inv: !(Cache[2].State = E & InvSet[1] = true)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1': NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1': NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true)}
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Cache[2].State = E & InvSet[1] = true))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, InvSet[1] == InvSet[1]', And(Cache[2].State' == E, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Cache[2].State = E & InvSet[1] = true))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, InvSet[1] == InvSet[1]', And(Cache[2].State' == E, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Cache[2].State = E & InvSet[1] = true))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, InvSet[1] == InvSet[1]', And(Cache[2].State' == E, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & InvSet[1] = true))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Cache[2].State == Cache[2].State', And(Cache[2].State' == E, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True)]
sat
解是：

[Cache[1].State = I,
 Chan2[1].Cmd = Empty,
 Chan3[1].Cmd = Empty,
 Chan1[1].Cmd' = Empty,
 InvSet[1]' = True,
 ExGntd = True,
 Cache[2].State' = E,
 InvSet[1] = False,
 CurCmd' = "ReqE",
 ShrSet[2] = False,
 InvSet[2]' = False,
 Chan1[1].Cmd = ReqE,
 CurCmd = "Empty",
 ShrSet[1] = True,
 Cache[2].State = E]
invlist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Cache[2].State', Chan2[1].Cmd, Chan1[1].Cmd', Chan1[1].Cmd, Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck']}
1111: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE),
 CurCmd' == "ReqE",
 Chan1[1].Cmd' == Empty,
 InvSet[1]' == ShrSet[1],
 InvSet[2]' == ShrSet[2],
 Cache[2].State == Cache[2].State',
 And(Cache[2].State' == E, InvSet[1]' == True),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True)]
checkVars: []
solution: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(InvSet[1] = false & Chan3[1].Cmd = Empty & ExGntd = true & Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Chan3[1].Cmd = Empty & ExGntd = true & Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(ExGntd = true & Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Chan2[1].Cmd = Empty & Cache[1].State = I & Cache[2].State = E & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Cache[1].State = I & Cache[2].State = E & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Cache[2].State = E & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Cache[2].State = E & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Cache[2].State = E & Chan1[1].Cmd = ReqE & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Cache[2].State = E & ShrSet[1] = true & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(ShrSet[1] = true & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Cache[2].State = E & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
sublist: [OpExpr(=, ShrSet[1], true), OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, ShrSet[1], true), OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Cache[2].State = E & ShrSet[1] = true);
No cti found. The invariants are OK.
sublist: [OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(ShrSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
sublist: [OpExpr(=, Cache[2].State, E)]
inv_list [OpExpr(=, Cache[2].State, E)]
new_inv: invariant "CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Cache[2].State = E);
counter_ex: ['CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
self.aux_inv: !(Cache[2].State = E & ShrSet[1] = true)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true']]
add pattern: !(Cache[2].State = E & ShrSet[1] = true)
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Cache[2].State == Cache[2].State', And(Cache[2].State' == E, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Cache[2].State == Cache[2].State', And(Cache[2].State' == E, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Cache[2].State == Cache[2].State', And(Cache[2].State' == E, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True)]
unsat
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1': NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1': NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Cache[2].State = E & ShrSet[1] = true)}
new_inv: !(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1': NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Cache[2].State = E & ShrSet[1] = true)}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(ExGntd' == False, CurCmd' == "ReqS")), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(ExGntd' == False, CurCmd' == "ReqS")), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('ExGntd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', ExGntd == ExGntd', And(Chan3[1].Cmd' == InvAck,
    And(ExGntd' == False, CurCmd' == "ReqS")), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('ExGntd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', ExGntd == ExGntd', And(Chan3[1].Cmd' == InvAck,
    And(ExGntd' == False, CurCmd' == "ReqS")), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, CurCmd == CurCmd', And(Chan3[1].Cmd' == InvAck,
    And(ExGntd' == False, CurCmd' == "ReqS")), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, ExGntd' == False, Chan3[1].Cmd == Chan3[1].Cmd', CurCmd == CurCmd', And(Chan3[1].Cmd' == InvAck,
    And(ExGntd' == False, CurCmd' == "ReqS")), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd = Empty,
 Chan3[2].Cmd' = Empty,
 ExGntd = True,
 Chan3[2].Cmd = InvAck,
 Chan3[1].Cmd' = InvAck,
 CurCmd' = "ReqS",
 ShrSet[1] = True,
 CurCmd = "ReqS",
 Chan3[1].Cmd = InvAck,
 ExGntd' = False,
 ShrSet[2]' = False]
invlist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true)]
set(self.enum_notEqulVars): {Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan3[2].Cmd, Chan2[1].Cmd, Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck']}
1111: [And(Chan3[2].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[2].Cmd' == Empty,
 ShrSet[2]' == False,
 ExGntd' == False,
 Chan3[1].Cmd == Chan3[1].Cmd',
 CurCmd == CurCmd',
 And(Chan3[1].Cmd' == InvAck,
     And(ExGntd' == False, CurCmd' == "ReqS")),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True)]
checkVars: []
solution: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[1].Cmd = InvAck & ExGntd = true & CurCmd = ReqS & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12"
   !(Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[1].Cmd = InvAck & ExGntd = true & CurCmd = ReqS & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[1].Cmd = InvAck & ExGntd = true & CurCmd = ReqS & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12"
   !(Cache[2].State = I & Cache[1].State = I & Chan3[1].Cmd = InvAck & ExGntd = true & CurCmd = ReqS & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12"
   !(Cache[1].State = I & Chan3[1].Cmd = InvAck & ExGntd = true & CurCmd = ReqS & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12"
   !(Chan3[1].Cmd = InvAck & ExGntd = true & CurCmd = ReqS & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12"
   !(ExGntd = true & CurCmd = ReqS & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12"
   !(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12"
   !(CurCmd = ReqS & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12"
   !(Chan3[1].Cmd = InvAck & Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12']
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12"
   !(Chan3[1].Cmd = InvAck & CurCmd = ReqS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12']
self.aux_inv: !(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true']]
add pattern: !(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [VarExpr('ExGntd'), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd == ExGntd', CurCmd == CurCmd', And(Chan3[1].Cmd' == InvAck,
    And(ExGntd' == False, CurCmd' == "ReqS")), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [VarExpr('ExGntd'), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, ExGntd == ExGntd', CurCmd == CurCmd', And(Chan3[1].Cmd' == InvAck,
    And(ExGntd' == False, CurCmd' == "ReqS")), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan2[2].Cmd = Empty,
 Cache[1].State' = I,
 ExGntd = False,
 Chan2[1].Cmd = Inv,
 Chan3[1].Cmd' = InvAck,
 CurCmd' = "ReqS",
 ShrSet[1] = True,
 CurCmd = "ReqS",
 Chan3[1].Cmd = Empty,
 ExGntd' = False,
 Chan2[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, ExGntd, Cache[1].State', Chan2[1].Cmd', CurCmd, Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty),
 Chan2[1].Cmd' == Empty,
 Chan3[1].Cmd' == InvAck,
 Cache[1].State' == I,
 ExGntd == ExGntd',
 CurCmd == CurCmd',
 And(Chan3[1].Cmd' == InvAck,
     And(ExGntd' == False, CurCmd' == "ReqS")),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck))]
checkVars: [Chan3[2].Cmd]
model[cti[str(vars)][0]]: None <class 'NoneType'>
solution: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & CurCmd = ReqS & ExGntd = false & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & CurCmd = ReqS & ExGntd = false & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1"
   !(Cache[2].State = I & Cache[1].State = I & CurCmd = ReqS & ExGntd = false & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1"
   !(Cache[1].State = I & CurCmd = ReqS & ExGntd = false & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1"
   !(CurCmd = ReqS & ExGntd = false & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1"
   !(ExGntd = false & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1"
   !(CurCmd = ReqS & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1"
   !(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1"
   !(ExGntd = false & Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1"
   !(CurCmd = ReqS & Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1']
sublist: [OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, ExGntd, false), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1"
   !(CurCmd = ReqS & ExGntd = false);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1']
self.aux_inv: !(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck']]
add pattern: !(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('ExGntd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', ExGntd == ExGntd', And(Chan3[1].Cmd' == InvAck,
    And(ExGntd' == False, CurCmd' == "ReqS")), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('ExGntd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', ExGntd == ExGntd', And(Chan3[1].Cmd' == InvAck,
    And(ExGntd' == False, CurCmd' == "ReqS")), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('ExGntd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', ExGntd == ExGntd', And(Chan3[1].Cmd' == InvAck,
    And(ExGntd' == False, CurCmd' == "ReqS")), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd = Empty,
 Chan1[1].Cmd' = Empty,
 InvSet[1]' = True,
 ExGntd = False,
 ShrSet[1] = True,
 Chan3[1].Cmd' = InvAck,
 CurCmd' = "ReqS",
 ShrSet[2] = False,
 InvSet[2]' = False,
 Chan1[1].Cmd = ReqS,
 CurCmd = "Empty",
 Chan3[1].Cmd = InvAck,
 ExGntd' = False]
invlist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', ExGntd, Chan2[1].Cmd, Chan1[1].Cmd', Chan1[1].Cmd, Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS),
 CurCmd' == "ReqS",
 Chan1[1].Cmd' == Empty,
 InvSet[1]' == ShrSet[1],
 InvSet[2]' == ShrSet[2],
 Chan3[1].Cmd == Chan3[1].Cmd',
 ExGntd == ExGntd',
 And(Chan3[1].Cmd' == InvAck,
     And(ExGntd' == False, CurCmd' == "ReqS")),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv))]
checkVars: [Chan3[2].Cmd]
model[cti[str(vars)][0]]: None <class 'NoneType'>
solution: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & ExGntd = false & Chan3[1].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & ExGntd = false & Chan3[1].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(Cache[2].State = I & Cache[1].State = I & ExGntd = false & Chan3[1].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, false), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, false), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(Cache[1].State = I & ExGntd = false & Chan3[1].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(ExGntd = false & Chan3[1].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(Chan3[1].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(Chan3[1].Cmd = InvAck & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(Chan3[1].Cmd = InvAck & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(Chan3[1].Cmd = InvAck & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1']
self.aux_inv: !(Chan3[1].Cmd = InvAck & CurCmd = Empty)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv']]
add pattern: !(Chan3[1].Cmd = InvAck & CurCmd = Empty)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('ExGntd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', ExGntd == ExGntd', And(Chan3[1].Cmd' == InvAck,
    And(ExGntd' == False, CurCmd' == "ReqS")), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty")]
unsat
list0: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1': NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Cache[2].State = E & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1': NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty)}
new_inv: !(ShrSet[1] = false & Chan2[1].Cmd = Inv)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Cache[2].State = E & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1': NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty)}
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & Chan2[1].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, ShrSet[1] == ShrSet[1]', And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & Chan2[1].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, ShrSet[1] == ShrSet[1]', And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [], '!inv': NegExpr(!(ShrSet[1] = false & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [], '!inv': NegExpr(!(ShrSet[1] = false & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(ShrSet[1] = false & Chan2[1].Cmd = Inv))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, Chan2[1].Cmd == Chan2[1].Cmd', And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty")]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan3[2].Cmd = Empty,
 CurCmd = "",
 Chan2[2].Cmd = Empty,
 Chan2[1].Cmd' = Inv,
 Chan2[1].Cmd = Inv,
 ExGntd = True,
 Chan3[1].Cmd' = Empty,
 ShrSet[1]' = False,
 ShrSet[1] = True,
 Chan3[1].Cmd = InvAck,
 ExGntd' = False]
invlist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty")]
checkVars: [Chan3[2].Cmd]
model[cti[str(vars)][0]]: Empty <class 'z3.z3.DatatypeRef'>
add:
Chan3[2].Cmd != Empty
2222: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Chan3[2].Cmd != Empty]
解是：

[Cache[2].State = I,
 ShrSet[1] = True,
 Chan3[1].Cmd = InvAck,
 ShrSet[1]' = False,
 Cache[1].State = I,
 Chan3[1].Cmd' = Empty,
 Chan3[2].Cmd = ReqS,
 ExGntd = True,
 Chan2[1].Cmd = Inv,
 Chan2[1].Cmd' = Inv,
 ExGntd' = False,
 CurCmd = "",
 Chan2[2].Cmd = Empty]
invlist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, ReqS)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Chan3[2].Cmd != Empty]
checkVars: [Chan3[2].Cmd]
model[cti[str(vars)][0]]: ReqS <class 'z3.z3.DatatypeRef'>
add:
Chan3[2].Cmd != ReqS
2222: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Chan3[2].Cmd != Empty,
 Chan3[2].Cmd != ReqS]
解是：

[Cache[2].State = I,
 ShrSet[1] = True,
 Chan3[1].Cmd = InvAck,
 ShrSet[1]' = False,
 Cache[1].State = I,
 Chan3[1].Cmd' = Empty,
 Chan3[2].Cmd = ReqE,
 ExGntd = True,
 Chan2[1].Cmd = Inv,
 Chan2[1].Cmd' = Inv,
 ExGntd' = False,
 CurCmd = "",
 Chan2[2].Cmd = Empty]
invlist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Chan3[2].Cmd != Empty,
 Chan3[2].Cmd != ReqS]
checkVars: [Chan3[2].Cmd]
model[cti[str(vars)][0]]: ReqE <class 'z3.z3.DatatypeRef'>
add:
Chan3[2].Cmd != ReqE
2222: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Chan3[2].Cmd != Empty,
 Chan3[2].Cmd != ReqS,
 Chan3[2].Cmd != ReqE]
解是：

[Cache[2].State = I,
 ShrSet[1] = True,
 Chan3[1].Cmd = InvAck,
 ShrSet[1]' = False,
 Cache[1].State = I,
 Chan3[1].Cmd' = Empty,
 Chan3[2].Cmd = Inv,
 ExGntd = True,
 Chan2[1].Cmd = Inv,
 Chan2[1].Cmd' = Inv,
 ExGntd' = False,
 CurCmd = "",
 Chan2[2].Cmd = Empty]
invlist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, Inv)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Chan3[2].Cmd != Empty,
 Chan3[2].Cmd != ReqS,
 Chan3[2].Cmd != ReqE]
checkVars: [Chan3[2].Cmd]
model[cti[str(vars)][0]]: Inv <class 'z3.z3.DatatypeRef'>
add:
Chan3[2].Cmd != Inv
2222: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Chan3[2].Cmd != Empty,
 Chan3[2].Cmd != ReqS,
 Chan3[2].Cmd != ReqE,
 Chan3[2].Cmd != Inv]
解是：

[Cache[2].State = I,
 ShrSet[1] = True,
 Chan3[1].Cmd = InvAck,
 ShrSet[1]' = False,
 Cache[1].State = I,
 Chan3[1].Cmd' = Empty,
 Chan3[2].Cmd = GntS,
 ExGntd = True,
 Chan2[1].Cmd = Inv,
 Chan2[1].Cmd' = Inv,
 ExGntd' = False,
 CurCmd = "",
 Chan2[2].Cmd = Empty]
invlist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, GntS)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Chan3[2].Cmd != Empty,
 Chan3[2].Cmd != ReqS,
 Chan3[2].Cmd != ReqE,
 Chan3[2].Cmd != Inv]
checkVars: [Chan3[2].Cmd]
model[cti[str(vars)][0]]: GntS <class 'z3.z3.DatatypeRef'>
add:
Chan3[2].Cmd != GntS
2222: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Chan3[2].Cmd != Empty,
 Chan3[2].Cmd != ReqS,
 Chan3[2].Cmd != ReqE,
 Chan3[2].Cmd != Inv,
 Chan3[2].Cmd != GntS]
解是：

[Cache[2].State = I,
 ShrSet[1] = True,
 Chan3[1].Cmd = InvAck,
 ShrSet[1]' = False,
 Cache[1].State = I,
 Chan3[1].Cmd' = Empty,
 Chan3[2].Cmd = GntE,
 ExGntd = True,
 Chan2[1].Cmd = Inv,
 Chan2[1].Cmd' = Inv,
 ExGntd' = False,
 CurCmd = "",
 Chan2[2].Cmd = Empty]
invlist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, GntE)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Chan3[2].Cmd != Empty,
 Chan3[2].Cmd != ReqS,
 Chan3[2].Cmd != ReqE,
 Chan3[2].Cmd != Inv,
 Chan3[2].Cmd != GntS]
checkVars: [Chan3[2].Cmd]
model[cti[str(vars)][0]]: GntE <class 'z3.z3.DatatypeRef'>
add:
Chan3[2].Cmd != GntE
2222: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Chan3[2].Cmd != Empty,
 Chan3[2].Cmd != ReqS,
 Chan3[2].Cmd != ReqE,
 Chan3[2].Cmd != Inv,
 Chan3[2].Cmd != GntS,
 Chan3[2].Cmd != GntE]
解是：

[Cache[2].State = I,
 ShrSet[1] = True,
 Chan3[1].Cmd = InvAck,
 ShrSet[1]' = False,
 Cache[1].State = I,
 Chan3[1].Cmd' = Empty,
 Chan3[2].Cmd = InvAck,
 ExGntd = True,
 Chan2[1].Cmd = Inv,
 Chan2[1].Cmd' = Inv,
 ExGntd' = False,
 CurCmd = "",
 Chan2[2].Cmd = Empty]
invlist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan3[1].Cmd == InvAck,
     And(CurCmd != "Empty", ExGntd == True)),
 Chan3[1].Cmd' == Empty,
 ShrSet[1]' == False,
 ExGntd' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Chan3[2].Cmd != Empty,
 Chan3[2].Cmd != ReqS,
 Chan3[2].Cmd != ReqE,
 Chan3[2].Cmd != Inv,
 Chan3[2].Cmd != GntS,
 Chan3[2].Cmd != GntE]
checkVars: [Chan3[2].Cmd]
model[cti[str(vars)][0]]: InvAck <class 'z3.z3.DatatypeRef'>
solution: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[2].Cmd = Empty & ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[2].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[2].State = S & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ExGntd = true & Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty']]
add pattern: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
solution: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, ReqS)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[2].Cmd = ReqS & ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ExGntd = true & Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
solution: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ExGntd = true & Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
solution: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[2].Cmd = Inv & ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ExGntd = true & Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
solution: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, GntS)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, GntS)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[2].Cmd = GntS & ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ExGntd = true & Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
solution: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[2].Cmd = GntE & ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ExGntd = true & Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
solution: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[2].Cmd = InvAck & ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & ExGntd = true & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(ExGntd = true & Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11"
   !(Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11']
self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck']]
exist self.aux_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(ShrSet[1] = false & Chan2[1].Cmd = Inv))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, Chan2[1].Cmd == Chan2[1].Cmd', And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, ShrSet[1] == ShrSet[1]', And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, ShrSet[1] == ShrSet[1]', And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan3[1].Cmd = Empty,
 CurCmd = "ReqE",
 Chan2[2].Cmd = Empty,
 InvSet[1] = True,
 ShrSet[1]' = False,
 ShrSet[1] = False,
 InvSet[1]' = False,
 Chan2[1].Cmd = Empty,
 Chan2[1].Cmd' = Inv]
invlist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, ShrSet[1], Chan3[1].Cmd, Cache[1].State, Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan2[1].Cmd == Empty,
     And(InvSet[1] == True,
         Or(CurCmd == "ReqE",
            And(CurCmd == "ReqS", ExGntd == True)))),
 Chan2[1].Cmd' == Inv,
 InvSet[1]' == False,
 ShrSet[1] == ShrSet[1]',
 And(ShrSet[1]' == False, Chan2[1].Cmd' == Inv),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck)]
checkVars: [Chan3[2].Cmd]
model[cti[str(vars)][0]]: None <class 'NoneType'>
solution: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1"
   !(Chan3[1].Cmd = Empty & Chan2[2].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & ShrSet[1] = false & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1"
   !(Chan2[2].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & ShrSet[1] = false & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1"
   !(Cache[2].State = S & Cache[1].State = I & ShrSet[1] = false & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1"
   !(Cache[1].State = I & ShrSet[1] = false & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1"
   !(ShrSet[1] = false & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1"
   !(CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1"
   !(ShrSet[1] = false & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1"
   !(InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1"
   !(ShrSet[1] = false & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, InvSet[1], true), OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, InvSet[1], true), OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1"
   !(ShrSet[1] = false & InvSet[1] = true);
No cti found. The invariants are OK.
sublist: [OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1"
   !(InvSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, ShrSet[1], false)]
inv_list [OpExpr(=, ShrSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1"
   !(ShrSet[1] = false);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1']
self.aux_inv: !(ShrSet[1] = false & InvSet[1] = true)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck']]
add pattern: !(ShrSet[1] = false & InvSet[1] = true)
list0: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Cache[2].State = E & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1': NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true)}
new_inv: !(Chan2[2].Cmd = GntE & InvSet[1] = true)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Cache[2].State = E & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1': NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true)}
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & InvSet[1] = true))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == GntE, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & InvSet[1] = true))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == GntE, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & InvSet[1] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == GntE, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & InvSet[1] = true))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == GntE, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & InvSet[1] = true))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == GntE, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & InvSet[1] = true))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_SendInv2 {'guard': OpExpr(&, Chan2[2].Cmd = Empty, InvSet[2] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & InvSet[1] = true))}
6. F: [And(Chan2[2].Cmd == Empty,
    And(InvSet[2] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[2].Cmd' == Inv, InvSet[2]' == False, InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == GntE, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan2[1].Cmd = Empty,
 Chan3[1].Cmd = Empty,
 Chan1[1].Cmd' = Empty,
 Chan2[2].Cmd = GntE,
 InvSet[1]' = True,
 ExGntd = True,
 InvSet[1] = False,
 CurCmd' = "ReqE",
 ShrSet[2] = False,
 InvSet[2]' = False,
 Chan1[1].Cmd = ReqE,
 CurCmd = "Empty",
 ShrSet[1] = True,
 Chan2[2].Cmd' = GntE]
invlist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan2[1].Cmd, Chan2[2].Cmd', Chan1[1].Cmd', Chan1[1].Cmd, Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE),
 CurCmd' == "ReqE",
 Chan1[1].Cmd' == Empty,
 InvSet[1]' == ShrSet[1],
 InvSet[2]' == ShrSet[2],
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == GntE, InvSet[1]' == True),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True)]
checkVars: [Chan3[2].Cmd]
model[cti[str(vars)][0]]: None <class 'NoneType'>
solution: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(InvSet[1] = false & Chan3[1].Cmd = Empty & ExGntd = true & Chan2[1].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan2[2].Cmd = GntE & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Chan3[1].Cmd = Empty & ExGntd = true & Chan2[1].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan2[2].Cmd = GntE & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(ExGntd = true & Chan2[1].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan2[2].Cmd = GntE & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Chan2[1].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan2[2].Cmd = GntE & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Cache[2].State = S & Cache[1].State = I & Chan2[2].Cmd = GntE & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Cache[1].State = I & Chan2[2].Cmd = GntE & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Chan2[2].Cmd = GntE & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Chan2[2].Cmd = GntE & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Chan2[2].Cmd = GntE & Chan1[1].Cmd = ReqE & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Chan2[2].Cmd = GntE & ShrSet[1] = true & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(ShrSet[1] = true & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Chan2[2].Cmd = GntE & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
sublist: [OpExpr(=, ShrSet[1], true), OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, ShrSet[1], true), OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Chan2[2].Cmd = GntE & ShrSet[1] = true);
No cti found. The invariants are OK.
sublist: [OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(ShrSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
sublist: [OpExpr(=, Chan2[2].Cmd, GntE)]
inv_list [OpExpr(=, Chan2[2].Cmd, GntE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1"
   !(Chan2[2].Cmd = GntE);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1']
self.aux_inv: !(Chan2[2].Cmd = GntE & ShrSet[1] = true)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true']]
add pattern: !(Chan2[2].Cmd = GntE & ShrSet[1] = true)
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
list0: {'CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Cache[2].State = E & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1': NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true)}
new_inv: !(Cache[2].State = E & ShrSet[1] = true)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1': NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true)}
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Cache[2].State = E & ShrSet[1] = true))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, ShrSet[1] == ShrSet[1]', And(Cache[2].State' == E, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Cache[2].State = E & ShrSet[1] = true))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, ShrSet[1] == ShrSet[1]', And(Cache[2].State' == E, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & ShrSet[1] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Cache[2].State == Cache[2].State', And(Cache[2].State' == E, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & ShrSet[1] = true))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Cache[2].State == Cache[2].State', And(Cache[2].State' == E, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & ShrSet[1] = true))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State'))], '!inv': NegExpr(!(Cache[2].State = E & ShrSet[1] = true))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, Cache[2].State == Cache[2].State', And(Cache[2].State' == E, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Cache[2].State = E & ShrSet[1] = true))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, ShrSet[1] == ShrSet[1]', And(Cache[2].State' == E, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1': NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true)}
new_inv: !(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1': NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true)}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd'), FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, CurCmd == CurCmd', Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_RecvInvAck12 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, ExGntd' == False, Chan3[1].Cmd == Chan3[1].Cmd', CurCmd == CurCmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd'), FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, CurCmd == CurCmd', Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_RecvInvAck22 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, Chan3[1].Cmd == Chan3[1].Cmd', CurCmd == CurCmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [VarExpr('CurCmd'), FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, CurCmd == CurCmd', Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan2[2].Cmd = Empty,
 Cache[1].State' = I,
 ExGntd = True,
 Chan3[2].Cmd' = InvAck,
 Chan2[1].Cmd = Inv,
 Chan3[2].Cmd = InvAck,
 Chan3[1].Cmd' = InvAck,
 CurCmd' = "ReqS",
 ShrSet[1] = True,
 CurCmd = "ReqS",
 Chan3[1].Cmd = Empty,
 Chan2[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, ShrSet[1], true)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan3[2].Cmd, Chan2[1].Cmd, Cache[1].State', Chan2[1].Cmd', CurCmd, Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty),
 Chan2[1].Cmd' == Empty,
 Chan3[1].Cmd' == InvAck,
 Cache[1].State' == I,
 CurCmd == CurCmd',
 Chan3[2].Cmd == Chan3[2].Cmd',
 And(Chan3[1].Cmd' == InvAck,
     And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True)]
checkVars: []
solution: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1"
   !(ShrSet[1] = true & ExGntd = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1"
   !(ExGntd = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1"
   !(Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1"
   !(Cache[1].State = I & Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1"
   !(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1"
   !(CurCmd = ReqS & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1"
   !(Chan3[2].Cmd = InvAck & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1"
   !(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1"
   !(CurCmd = ReqS & Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1"
   !(Chan3[2].Cmd = InvAck & Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1']
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1"
   !(Chan3[2].Cmd = InvAck & CurCmd = ReqS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1']
self.aux_inv: !(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true']]
add pattern: !(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, Chan3[1].Cmd == Chan3[1].Cmd', CurCmd == CurCmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan2[1].Cmd = Empty,
 Chan2[2].Cmd' = Empty,
 ExGntd = True,
 Chan2[2].Cmd = Inv,
 Chan3[2].Cmd' = InvAck,
 Cache[2].State' = I,
 Chan3[2].Cmd = Empty,
 Chan3[1].Cmd' = InvAck,
 CurCmd' = "ReqS",
 ShrSet[1] = True,
 CurCmd = "ReqS",
 Chan3[1].Cmd = InvAck]
invlist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, ShrSet[1], true)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan3[2].Cmd, Cache[2].State', Chan2[1].Cmd, Chan2[2].Cmd', CurCmd, Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty),
 Chan2[2].Cmd' == Empty,
 Chan3[2].Cmd' == InvAck,
 Cache[2].State' == I,
 Chan3[1].Cmd == Chan3[1].Cmd',
 CurCmd == CurCmd',
 And(Chan3[1].Cmd' == InvAck,
     And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
checkVars: []
solution: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2"
   !(ShrSet[1] = true & ExGntd = true & Chan2[1].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & CurCmd = ReqS & Chan3[1].Cmd = InvAck & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2"
   !(ExGntd = true & Chan2[1].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & CurCmd = ReqS & Chan3[1].Cmd = InvAck & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2"
   !(Chan2[1].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & CurCmd = ReqS & Chan3[1].Cmd = InvAck & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2"
   !(Cache[2].State = S & Cache[1].State = I & CurCmd = ReqS & Chan3[1].Cmd = InvAck & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2"
   !(Cache[1].State = I & CurCmd = ReqS & Chan3[1].Cmd = InvAck & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2"
   !(CurCmd = ReqS & Chan3[1].Cmd = InvAck & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2"
   !(Chan3[1].Cmd = InvAck & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2']
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2"
   !(CurCmd = ReqS & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2']
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2"
   !(CurCmd = ReqS & Chan3[1].Cmd = InvAck & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2"
   !(Chan3[1].Cmd = InvAck & Chan2[2].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2']
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2"
   !(CurCmd = ReqS & Chan2[2].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2"
   !(CurCmd = ReqS & Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck2']
self.aux_inv: !(CurCmd = ReqS & Chan3[1].Cmd = InvAck & Chan2[2].Cmd = Inv)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv']]
exist self.aux_inv: !(CurCmd = ReqS & Chan3[1].Cmd = InvAck & Chan2[2].Cmd = Inv)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[1].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan3[2].Cmd' == InvAck)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1': NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv)}
new_inv: !(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv)}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('CurCmd'), VarExpr('ExGntd')], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, CurCmd == CurCmd', ExGntd == ExGntd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('CurCmd'), VarExpr('ExGntd')], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, CurCmd == CurCmd', ExGntd == ExGntd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[1].Cmd == Chan2[1].Cmd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", ExGntd == ExGntd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('ExGntd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", ExGntd == ExGntd', Chan2[1].Cmd == Chan2[1].Cmd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, CurCmd == CurCmd', Chan2[1].Cmd == Chan2[1].Cmd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvInvAck12 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, ExGntd' == False, CurCmd == CurCmd', Chan2[1].Cmd == Chan2[1].Cmd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [VarExpr('CurCmd'), VarExpr('ExGntd')], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, CurCmd == CurCmd', ExGntd == ExGntd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd'), VarExpr('ExGntd')], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, CurCmd == CurCmd', ExGntd == ExGntd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [VarExpr('ExGntd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], ExGntd == ExGntd', Chan2[1].Cmd == Chan2[1].Cmd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [VarExpr('ExGntd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], ExGntd == ExGntd', Chan2[1].Cmd == Chan2[1].Cmd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [VarExpr('ExGntd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], ExGntd == ExGntd', Chan2[1].Cmd == Chan2[1].Cmd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan3[1].Cmd = Empty,
 Chan2[2].Cmd = Empty,
 Chan1[1].Cmd' = Empty,
 Chan2[1].Cmd = Inv,
 InvSet[1]' = True,
 ExGntd = False,
 CurCmd' = "ReqS",
 ShrSet[2] = False,
 InvSet[2]' = False,
 Chan1[1].Cmd = ReqS,
 CurCmd = "Empty",
 ShrSet[1] = True,
 ExGntd' = False,
 Chan2[1].Cmd' = Inv]
invlist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[2].Cmd, ExGntd, Chan2[1].Cmd, Chan2[1].Cmd', Chan1[1].Cmd', Chan1[1].Cmd, Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS),
 CurCmd' == "ReqS",
 Chan1[1].Cmd' == Empty,
 InvSet[1]' == ShrSet[1],
 InvSet[2]' == ShrSet[2],
 ExGntd == ExGntd',
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(CurCmd' == "ReqS",
     And(ExGntd' == False, Chan2[1].Cmd' == Inv)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv))]
checkVars: []
solution: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(Chan3[1].Cmd = Empty & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = false & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = false & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = false & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = false & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(Chan2[1].Cmd = Inv & ExGntd = false & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(ExGntd = false & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(Chan2[1].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(Chan2[1].Cmd = Inv & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(Chan2[1].Cmd = Inv & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(Chan2[1].Cmd = Inv & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1"
   !(Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1']
self.aux_inv: !(Chan2[1].Cmd = Inv & CurCmd = Empty)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv']]
add pattern: !(Chan2[1].Cmd = Inv & CurCmd = Empty)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [VarExpr('ExGntd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], ExGntd == ExGntd', Chan2[1].Cmd == Chan2[1].Cmd', And(CurCmd' == "ReqS",
    And(ExGntd' == False, Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1': NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty)}
new_inv: !(Chan3[1].Cmd = InvAck & CurCmd = Empty)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty)}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = Empty))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = Empty))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = Empty))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = Empty))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = Empty))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, CurCmd == CurCmd', And(Chan3[1].Cmd' == InvAck, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = Empty))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, CurCmd == CurCmd', And(Chan3[1].Cmd' == InvAck, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = Empty))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, CurCmd == CurCmd', And(Chan3[1].Cmd' == InvAck, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = Empty))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = Empty))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = Empty))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvReqS1_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & CurCmd = Empty))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
list0: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1': NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty)}
new_inv: !(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty)}
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[1].Cmd' == Inv, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[1].Cmd' == Inv, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[1].Cmd' == Inv, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[1].Cmd' == Inv, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == Inv, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == Inv, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, And(Chan2[1].Cmd' == Inv, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Chan3[1].Cmd == Chan3[1].Cmd', And(Chan2[1].Cmd' == Inv, Chan3[1].Cmd' == InvAck), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = S,
 Chan3[2].Cmd = Empty,
 CurCmd = "ReqE",
 Chan2[2].Cmd = Empty,
 InvSet[1] = True,
 ShrSet[1] = True,
 Chan3[1].Cmd = InvAck,
 InvSet[1]' = False,
 Chan2[1].Cmd = Empty,
 Chan3[1].Cmd' = InvAck,
 Chan2[1].Cmd' = Inv]
invlist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan3[2].Cmd, Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan2[1].Cmd == Empty,
     And(InvSet[1] == True,
         Or(CurCmd == "ReqE",
            And(CurCmd == "ReqS", ExGntd == True)))),
 Chan2[1].Cmd' == Inv,
 InvSet[1]' == False,
 Chan3[1].Cmd == Chan3[1].Cmd',
 And(Chan2[1].Cmd' == Inv, Chan3[1].Cmd' == InvAck),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)),
 Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty")]
checkVars: []
solution: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(Chan3[2].Cmd = Empty & ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan3[1].Cmd = InvAck & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan3[1].Cmd = InvAck & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(Chan2[2].Cmd = Empty & Cache[2].State = S & Cache[1].State = I & Chan3[1].Cmd = InvAck & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, S)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(Cache[2].State = S & Cache[1].State = I & Chan3[1].Cmd = InvAck & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(Cache[1].State = I & Chan3[1].Cmd = InvAck & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(Chan3[1].Cmd = InvAck & CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqE)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(CurCmd = ReqE & InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(Chan3[1].Cmd = InvAck & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(Chan3[1].Cmd = InvAck & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1']
sublist: [OpExpr(=, InvSet[1], true), OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, InvSet[1], true), OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(Chan3[1].Cmd = InvAck & InvSet[1] = true);
No cti found. The invariants are OK.
sublist: [OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(InvSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1']
sublist: [OpExpr(=, Chan3[1].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[1].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1"
   !(Chan3[1].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1']
self.aux_inv: !(Chan3[1].Cmd = InvAck & InvSet[1] = true)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = Empty']]
add pattern: !(Chan3[1].Cmd = InvAck & InvSet[1] = true)
list0: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1': NegExpr(ShrSet[1] = false & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1': NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true)}
new_inv: !(ShrSet[1] = false & InvSet[1] = true)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1': NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true)}
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & InvSet[1] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", InvSet[1] == InvSet[1]', And(ShrSet[1]' == False, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & InvSet[1] = true))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", InvSet[1] == InvSet[1]', And(ShrSet[1]' == False, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & InvSet[1] = true))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, InvSet[1] == InvSet[1]', And(ShrSet[1]' == False, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & InvSet[1] = true))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, InvSet[1] == InvSet[1]', And(ShrSet[1]' == False, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & InvSet[1] = true))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, ShrSet[1] == ShrSet[1]', And(ShrSet[1]' == False, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], ShrSet[1] == ShrSet[1]', And(ShrSet[1]' == False, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], ShrSet[1] == ShrSet[1]', And(ShrSet[1]' == False, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], ShrSet[1] == ShrSet[1]', And(ShrSet[1]' == False, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_SendInv1_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ShrSet[1] = false & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], ShrSet[1] == ShrSet[1]', And(ShrSet[1]' == False, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
list0: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1': NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1': NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true)}
new_inv: !(Chan2[2].Cmd = GntE & ShrSet[1] = true)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1': NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true)}
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ShrSet[1] = true))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, ShrSet[1] == ShrSet[1]', And(Chan2[2].Cmd' == GntE, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ShrSet[1] = true))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, ShrSet[1] == ShrSet[1]', And(Chan2[2].Cmd' == GntE, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ShrSet[1] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ShrSet[1] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", ShrSet[1] == ShrSet[1]', And(Chan2[2].Cmd' == GntE, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ShrSet[1] = true))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ShrSet[1] = true))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", ShrSet[1] == ShrSet[1]', And(Chan2[2].Cmd' == GntE, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ShrSet[1] = true))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ShrSet[1] = true))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == GntE, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ShrSet[1] = true))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, ShrSet[1] == ShrSet[1]', And(Chan2[2].Cmd' == GntE, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendInvAck1_1_SendInv1_1_RecvReqE1_1_SendInv2 {'guard': OpExpr(&, Chan2[2].Cmd = Empty, InvSet[2] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = GntE & ShrSet[1] = true))}
6. F: [And(Chan2[2].Cmd == Empty,
    And(InvSet[2] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[2].Cmd' == Inv, InvSet[2]' == False, ShrSet[1] == ShrSet[1]', And(Chan2[2].Cmd' == GntE, ShrSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1': NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true)}
new_inv: !(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1': NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true)}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, Chan3[2].Cmd == Chan3[2].Cmd', CurCmd == CurCmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, Chan3[2].Cmd == Chan3[2].Cmd', CurCmd == CurCmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[2].Cmd == Chan3[2].Cmd', Chan2[1].Cmd == Chan2[1].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", Chan3[2].Cmd == Chan3[2].Cmd', Chan2[1].Cmd == Chan2[1].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_RecvInvAck12 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, ExGntd' == False, CurCmd == CurCmd', Chan2[1].Cmd == Chan2[1].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_RecvInvAck22 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, CurCmd == CurCmd', Chan2[1].Cmd == Chan2[1].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, Chan3[2].Cmd == Chan3[2].Cmd', CurCmd == CurCmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [VarExpr('CurCmd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, CurCmd == CurCmd', Chan2[1].Cmd == Chan2[1].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan3[1].Cmd = Empty,
 Chan2[2].Cmd' = Empty,
 Chan2[2].Cmd = Inv,
 Chan3[2].Cmd' = InvAck,
 Cache[2].State' = I,
 Chan2[1].Cmd = Inv,
 Chan3[2].Cmd = Empty,
 CurCmd' = "ReqS",
 CurCmd = "ReqS",
 ShrSet[1] = True,
 ExGntd = True,
 Chan2[1].Cmd' = Inv]
invlist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ExGntd, true), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[2].Cmd, Cache[2].State', Chan2[1].Cmd, Chan2[2].Cmd', Chan2[1].Cmd', CurCmd, Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty),
 Chan2[2].Cmd' == Empty,
 Chan3[2].Cmd' == InvAck,
 Cache[2].State' == I,
 CurCmd == CurCmd',
 Chan2[1].Cmd == Chan2[1].Cmd',
 And(Chan3[2].Cmd' == InvAck,
     And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)),
 Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"),
 Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True)]
checkVars: []
solution: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ExGntd, true), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ExGntd, true), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2"
   !(Chan3[1].Cmd = Empty & ShrSet[1] = true & ExGntd = true & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ExGntd, true), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ExGntd, true), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2"
   !(ShrSet[1] = true & ExGntd = true & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2"
   !(ExGntd = true & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2"
   !(Cache[1].State = I & Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2"
   !(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2"
   !(CurCmd = ReqS & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2']
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan3[2].Cmd, Empty), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2"
   !(Chan2[1].Cmd = Inv & Chan3[2].Cmd = Empty & Chan2[2].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2']
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2"
   !(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2"
   !(CurCmd = ReqS & Chan2[2].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2']
sublist: [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2"
   !(Chan2[1].Cmd = Inv & Chan2[2].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2']
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2"
   !(Chan2[1].Cmd = Inv & CurCmd = ReqS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2']
self.aux_inv: !(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = Empty'], ['Chan3[_].Cmd = InvAck', 'InvSet[_] = true']]
add pattern: !(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Chan3[2].Cmd == Chan3[2].Cmd', CurCmd == CurCmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan3[1].Cmd = Empty,
 Chan2[2].Cmd = Empty,
 Chan2[1].Cmd' = Inv,
 Chan3[2].Cmd' = InvAck,
 InvSet[1]' = False,
 ExGntd = True,
 Chan2[1].Cmd = Empty,
 Chan3[2].Cmd = InvAck,
 CurCmd' = "ReqS",
 InvSet[1] = True,
 CurCmd = "ReqS",
 ShrSet[1] = True]
invlist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan2[1].Cmd', Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE', 'Inv'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan2[1].Cmd == Empty,
     And(InvSet[1] == True,
         Or(CurCmd == "ReqE",
            And(CurCmd == "ReqS", ExGntd == True)))),
 Chan2[1].Cmd' == Inv,
 InvSet[1]' == False,
 Chan3[2].Cmd == Chan3[2].Cmd',
 CurCmd == CurCmd',
 And(Chan3[2].Cmd' == InvAck,
     And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)),
 Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"),
 Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True),
 Implies(Chan2[1].Cmd == Inv,
         Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv))]
checkVars: []
solution: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(Chan3[1].Cmd = Empty & ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(Cache[1].State = I & Chan3[2].Cmd = InvAck & ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(Chan3[2].Cmd = InvAck & ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(Chan3[2].Cmd = InvAck & InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true);
No cti found. The invariants are OK.
sublist: [OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(CurCmd = ReqS & InvSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, InvSet[1], true), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, InvSet[1], true), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(Chan3[2].Cmd = InvAck & InvSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1']
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1"
   !(Chan3[2].Cmd = InvAck & CurCmd = ReqS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1']
self.aux_inv: !(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = Empty'], ['Chan3[_].Cmd = InvAck', 'InvSet[_] = true'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv']]
add pattern: !(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[2].Cmd == Chan3[2].Cmd', Chan2[1].Cmd == Chan2[1].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[2].Cmd == Chan3[2].Cmd', Chan2[1].Cmd == Chan2[1].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[2].Cmd == Chan3[2].Cmd', Chan2[1].Cmd == Chan2[1].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[2].Cmd == Chan3[2].Cmd', Chan2[1].Cmd == Chan2[1].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", Chan2[1].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1': NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true)}
new_inv: !(Chan2[1].Cmd = Inv & CurCmd = Empty)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1': NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true)}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('CurCmd')], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = Empty))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, CurCmd == CurCmd', And(Chan2[1].Cmd' == Inv, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('CurCmd')], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = Empty))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, CurCmd == CurCmd', And(Chan2[1].Cmd' == Inv, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = Empty))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", And(Chan2[1].Cmd' == Inv, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = Empty))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == Inv, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = Empty))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", And(Chan2[1].Cmd' == Inv, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = Empty))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == Inv, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [VarExpr('CurCmd')], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = Empty))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, CurCmd == CurCmd', And(Chan2[1].Cmd' == Inv, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd')], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = Empty))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, CurCmd == CurCmd', And(Chan2[1].Cmd' == Inv, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = Empty))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == Inv, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = Empty))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == Inv, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = Empty))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == Inv, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_SendInvAck1_1_RecvReqS1_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = Empty))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == Inv, CurCmd' == "Empty"), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
list0: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1': NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true)}
new_inv: !(Chan3[1].Cmd = InvAck & InvSet[1] = true)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true)}
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & InvSet[1] = true))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, InvSet[1] == InvSet[1]', And(Chan3[1].Cmd' == InvAck, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & InvSet[1] = true))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, InvSet[1] == InvSet[1]', And(Chan3[1].Cmd' == InvAck, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & InvSet[1] = true))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, InvSet[1] == InvSet[1]', And(Chan3[1].Cmd' == InvAck, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan3[2].Cmd = Empty,
 Chan2[2].Cmd = Empty,
 CurCmd = "",
 Cache[1].State' = I,
 InvSet[1]' = True,
 Chan2[1].Cmd = Inv,
 Chan3[1].Cmd' = InvAck,
 InvSet[1] = True,
 ShrSet[1] = True,
 Chan3[1].Cmd = Empty,
 Chan2[1].Cmd' = Empty]
invlist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[1].Cmd', Chan3[2].Cmd, Chan2[1].Cmd, Cache[1].State', Chan2[1].Cmd', InvSet[1], Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE', 'Inv'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty),
 Chan2[1].Cmd' == Empty,
 Chan3[1].Cmd' == InvAck,
 Cache[1].State' == I,
 InvSet[1] == InvSet[1]',
 And(Chan3[1].Cmd' == InvAck, InvSet[1]' == True),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)),
 Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"),
 Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True),
 Implies(Chan2[1].Cmd == Inv,
         Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", InvSet[1] != True))]
checkVars: []
solution: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1"
   !(Chan3[2].Cmd = Empty & ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & InvSet[1] = true & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1"
   !(ShrSet[1] = true & Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & InvSet[1] = true & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1"
   !(Chan2[2].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & InvSet[1] = true & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1"
   !(Cache[2].State = I & Cache[1].State = I & InvSet[1] = true & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1"
   !(Cache[1].State = I & InvSet[1] = true & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1"
   !(InvSet[1] = true & Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1"
   !(Chan3[1].Cmd = Empty & Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1']
sublist: [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1"
   !(InvSet[1] = true & Chan2[1].Cmd = Inv);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1"
   !(Chan2[1].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1']
sublist: [OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1"
   !(InvSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1']
self.aux_inv: !(InvSet[1] = true & Chan2[1].Cmd = Inv)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = Empty'], ['Chan3[_].Cmd = InvAck', 'InvSet[_] = true'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'InvSet[_] = true']]
add pattern: !(InvSet[1] = true & Chan2[1].Cmd = Inv)
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & InvSet[1] = true))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[1].Cmd = InvAck & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[1].Cmd == Chan3[1].Cmd', And(Chan3[1].Cmd' == InvAck, InvSet[1]' == True), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1': NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1': NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv)}
new_inv: !(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1': NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv)}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('CurCmd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, CurCmd == CurCmd', Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', CurCmd == CurCmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('CurCmd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, CurCmd == CurCmd', Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, Chan2[1].Cmd == Chan2[1].Cmd', CurCmd == CurCmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", Chan2[1].Cmd == Chan2[1].Cmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [VarExpr('CurCmd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, CurCmd == CurCmd', Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, Chan2[1].Cmd == Chan2[1].Cmd', CurCmd == CurCmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd'), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, CurCmd == CurCmd', Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan3[2].Cmd = Empty,
 Chan3[1].Cmd = Empty,
 Chan2[1].Cmd' = Inv,
 InvSet[1]' = False,
 Chan2[2].Cmd = Inv,
 ExGntd = True,
 Chan2[1].Cmd = Empty,
 CurCmd' = "ReqS",
 InvSet[1] = True,
 CurCmd = "ReqS",
 ShrSet[1] = True,
 Chan2[2].Cmd' = Inv]
invlist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan3[2].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true), NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan2[2].Cmd', Chan2[1].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE', 'Inv'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan2[1].Cmd == Empty,
     And(InvSet[1] == True,
         Or(CurCmd == "ReqE",
            And(CurCmd == "ReqS", ExGntd == True)))),
 Chan2[1].Cmd' == Inv,
 InvSet[1]' == False,
 CurCmd == CurCmd',
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[1].Cmd' == Inv,
     And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)),
 Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"),
 Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True),
 Implies(Chan2[1].Cmd == Inv,
         Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", InvSet[1] != True)),
 Implies(InvSet[1] == True, Chan2[1].Cmd != Inv)]
checkVars: []
solution: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan3[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan3[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(Chan3[2].Cmd = Empty & Chan3[1].Cmd = Empty & ShrSet[1] = true & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(Chan3[1].Cmd = Empty & ShrSet[1] = true & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(ShrSet[1] = true & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(Cache[1].State = I & Chan2[2].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(Chan2[2].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(ExGntd = true & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(CurCmd = ReqS & InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(Chan2[2].Cmd = Inv & InvSet[1] = true & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1']
sublist: [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(Chan2[2].Cmd = Inv & CurCmd = ReqS & Chan2[1].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1']
sublist: [OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true);
No cti found. The invariants are OK.
sublist: [OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, InvSet[1], true), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(CurCmd = ReqS & InvSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1']
sublist: [OpExpr(=, InvSet[1], true), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, InvSet[1], true), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(Chan2[2].Cmd = Inv & InvSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1']
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1"
   !(Chan2[2].Cmd = Inv & CurCmd = ReqS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1']
self.aux_inv: !(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = Empty'], ['Chan3[_].Cmd = InvAck', 'InvSet[_] = true'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'InvSet[_] = true'], ['InvSet[_] = true', 'Chan2[_].Cmd = Inv']]
add pattern: !(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2 {'guard': OpExpr(&, Chan2[2].Cmd = Empty, InvSet[2] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [And(Chan2[2].Cmd == Empty,
    And(InvSet[2] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[2].Cmd' == Inv, InvSet[2]' == False, Chan2[1].Cmd == Chan2[1].Cmd', CurCmd == CurCmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan3[2].Cmd = Empty,
 Chan3[1].Cmd = Empty,
 Chan2[2].Cmd' = Inv,
 Chan2[2].Cmd = Empty,
 Chan2[1].Cmd = Inv,
 ExGntd = True,
 InvSet[1] = False,
 CurCmd' = "ReqS",
 InvSet[2]' = False,
 CurCmd = "ReqS",
 ShrSet[1] = True,
 InvSet[2] = True,
 Chan2[1].Cmd' = Inv]
invlist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false), OpExpr(=, Chan3[2].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true), NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan2[1].Cmd', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE', 'Inv'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan2[2].Cmd == Empty,
     And(InvSet[2] == True,
         Or(CurCmd == "ReqE",
            And(CurCmd == "ReqS", ExGntd == True)))),
 Chan2[2].Cmd' == Inv,
 InvSet[2]' == False,
 Chan2[1].Cmd == Chan2[1].Cmd',
 CurCmd == CurCmd',
 And(Chan2[1].Cmd' == Inv,
     And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)),
 Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"),
 Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True),
 Implies(Chan2[1].Cmd == Inv,
         Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", InvSet[1] != True)),
 Implies(InvSet[1] == True, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == Inv,
         Implies(CurCmd == "ReqS", InvSet[1] != True))]
checkVars: []
solution: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false), OpExpr(=, Chan3[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false), OpExpr(=, Chan3[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(Chan3[2].Cmd = Empty & InvSet[1] = false & Chan3[1].Cmd = Empty & ShrSet[1] = true & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(InvSet[1] = false & Chan3[1].Cmd = Empty & ShrSet[1] = true & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(Chan3[1].Cmd = Empty & ShrSet[1] = true & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(ShrSet[1] = true & Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(Cache[1].State = I & Chan2[1].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(Chan2[1].Cmd = Inv & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2']
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(Chan2[1].Cmd = Inv & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2']
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(Chan2[1].Cmd = Inv & InvSet[2] = true & Chan2[2].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2']
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2']
sublist: [OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(Chan2[1].Cmd = Inv & CurCmd = ReqS & InvSet[2] = true);
No cti found. The invariants are OK.
sublist: [OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS)]
inv_list [OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(CurCmd = ReqS & InvSet[2] = true);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2']
sublist: [OpExpr(=, InvSet[2], true), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, InvSet[2], true), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(Chan2[1].Cmd = Inv & InvSet[2] = true);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2']
sublist: [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, ReqS), OpExpr(=, Chan2[1].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2"
   !(Chan2[1].Cmd = Inv & CurCmd = ReqS);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv2']
self.aux_inv: !(Chan2[1].Cmd = Inv & CurCmd = ReqS & InvSet[2] = true)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = Empty'], ['Chan3[_].Cmd = InvAck', 'InvSet[_] = true'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'InvSet[_] = true'], ['InvSet[_] = true', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'InvSet[_] = true']]
exist self.aux_inv: !(Chan2[1].Cmd = Inv & CurCmd = ReqS & InvSet[2] = true)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[1].Cmd == Chan2[1].Cmd', Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[1].Cmd == Chan2[1].Cmd', Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[1].Cmd == Chan2[1].Cmd', Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[1].Cmd == Chan2[1].Cmd', Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[1].Cmd' == Inv,
    And(CurCmd' == "ReqS", Chan2[2].Cmd' == Inv)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1': NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true), 'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1': NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1': NegExpr(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true)}
new_inv: !(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1': NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1': NegExpr(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true)}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[2].Cmd == Chan3[2].Cmd', InvSet[1] == InvSet[1]', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", Chan3[2].Cmd == Chan3[2].Cmd', InvSet[1] == InvSet[1]', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan3[2].Cmd == Chan3[2].Cmd', InvSet[1] == InvSet[1]', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", Chan3[2].Cmd == Chan3[2].Cmd', InvSet[1] == InvSet[1]', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvInvAck12 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd'), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, ExGntd' == False, CurCmd == CurCmd', InvSet[1] == InvSet[1]', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvInvAck22 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd'), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, CurCmd == CurCmd', InvSet[1] == InvSet[1]', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [VarExpr('CurCmd'), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, CurCmd == CurCmd', InvSet[1] == InvSet[1]', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Chan3[2].Cmd == Chan3[2].Cmd', CurCmd == CurCmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan2[1].Cmd = Empty,
 Chan3[1].Cmd = Empty,
 Chan2[2].Cmd = Empty,
 Chan1[1].Cmd' = Empty,
 InvSet[1]' = True,
 Chan3[2].Cmd' = InvAck,
 Chan3[2].Cmd = InvAck,
 CurCmd' = "ReqS",
 ShrSet[2] = False,
 InvSet[2]' = False,
 Chan1[1].Cmd = ReqS,
 CurCmd = "Empty",
 ShrSet[1] = True]
invlist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true), NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan1[1].Cmd', Chan1[1].Cmd, Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE', 'Inv'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS),
 CurCmd' == "ReqS",
 Chan1[1].Cmd' == Empty,
 InvSet[1]' == ShrSet[1],
 InvSet[2]' == ShrSet[2],
 Chan3[2].Cmd == Chan3[2].Cmd',
 And(Chan3[2].Cmd' == InvAck,
     And(CurCmd' == "ReqS", InvSet[1]' == True)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)),
 Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"),
 Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True),
 Implies(Chan2[1].Cmd == Inv,
         Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", InvSet[1] != True)),
 Implies(InvSet[1] == True, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == Inv,
         Implies(CurCmd == "ReqS", InvSet[1] != True))]
checkVars: []
solution: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(Chan3[1].Cmd = Empty & Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(Cache[1].State = I & Chan3[2].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(Chan3[2].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(Chan3[2].Cmd = InvAck & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(Chan3[2].Cmd = InvAck & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(Chan3[2].Cmd = InvAck & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS1']
self.aux_inv: !(Chan3[2].Cmd = InvAck & CurCmd = Empty)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = Empty'], ['Chan3[_].Cmd = InvAck', 'InvSet[_] = true'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'InvSet[_] = true'], ['InvSet[_] = true', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'InvSet[_] = true']]
exist self.aux_inv: !(Chan3[2].Cmd = InvAck & CurCmd = Empty)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan3[2].Cmd == Chan3[2].Cmd', And(Chan3[2].Cmd' == InvAck,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan2[1].Cmd = Empty,
 Chan3[1].Cmd = Empty,
 Chan2[2].Cmd = Empty,
 InvSet[1]' = True,
 Chan3[2].Cmd' = InvAck,
 Chan1[2].Cmd' = Empty,
 Chan3[2].Cmd = InvAck,
 CurCmd' = "ReqS",
 ShrSet[2] = False,
 InvSet[2]' = False,
 CurCmd = "Empty",
 ShrSet[1] = True,
 Chan1[2].Cmd = ReqS]
invlist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true), NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan1[2].Cmd, Chan3[1].Cmd, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan1[2].Cmd', Chan3[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE', 'Inv'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS),
 CurCmd' == "ReqS",
 Chan1[2].Cmd' == Empty,
 InvSet[1]' == ShrSet[1],
 InvSet[2]' == ShrSet[2],
 Chan3[2].Cmd == Chan3[2].Cmd',
 And(Chan3[2].Cmd' == InvAck,
     And(CurCmd' == "ReqS", InvSet[1]' == True)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)),
 Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"),
 Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True),
 Implies(Chan2[1].Cmd == Inv,
         Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", InvSet[1] != True)),
 Implies(InvSet[1] == True, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == Inv,
         Implies(CurCmd == "ReqS", InvSet[1] != True))]
checkVars: []
solution: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(Chan3[1].Cmd = Empty & Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(Cache[2].State = I & Cache[1].State = I & Chan3[2].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(Cache[1].State = I & Chan3[2].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(Chan3[2].Cmd = InvAck & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(Chan3[2].Cmd = InvAck & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(Chan3[2].Cmd = InvAck & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(Chan1[2].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(Chan3[2].Cmd = InvAck & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2']
sublist: [OpExpr(=, Chan3[2].Cmd, InvAck)]
inv_list [OpExpr(=, Chan3[2].Cmd, InvAck)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2"
   !(Chan3[2].Cmd = InvAck);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInv1_1_RecvReqS2']
self.aux_inv: !(Chan3[2].Cmd = InvAck & CurCmd = Empty)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = Empty'], ['Chan3[_].Cmd = InvAck', 'InvSet[_] = true'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'InvSet[_] = true'], ['InvSet[_] = true', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'InvSet[_] = true']]
exist self.aux_inv: !(Chan3[2].Cmd = InvAck & CurCmd = Empty)
list0: {'CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1': NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv), 'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1': NegExpr(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true)}
new_inv: !(InvSet[1] = true & Chan2[1].Cmd = Inv)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1': NegExpr(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true)}
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1_RecvGntE1 {'guard': OpExpr(=, Chan2[1].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(InvSet[1] = true & Chan2[1].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntE, Cache[1].State' == E, Chan2[1].Cmd' == Empty, InvSet[1] == InvSet[1]', And(InvSet[1]' == True, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1_RecvGntS1 {'guard': OpExpr(=, Chan2[1].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(InvSet[1] = true & Chan2[1].Cmd = Inv))}
6. F: [Chan2[1].Cmd == GntS, Cache[1].State' == S, Chan2[1].Cmd' == Empty, InvSet[1] == InvSet[1]', And(InvSet[1]' == True, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(InvSet[1] = true & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", InvSet[1] == InvSet[1]', And(InvSet[1]' == True, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(InvSet[1] = true & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", InvSet[1] == InvSet[1]', And(InvSet[1]' == True, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1_SendInvAck1 {'guard': OpExpr(&, Chan2[1].Cmd = Inv, Chan3[1].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('1')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(InvSet[1] = true & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Inv, Chan3[1].Cmd == Empty), Chan2[1].Cmd' == Empty, Chan3[1].Cmd' == InvAck, Cache[1].State' == I, InvSet[1] == InvSet[1]', And(InvSet[1]' == True, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [], '!inv': NegExpr(!(InvSet[1] = true & Chan2[1].Cmd = Inv))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, And(InvSet[1]' == True, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(InvSet[1] = true & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[1].Cmd == Chan2[1].Cmd', And(InvSet[1]' == True, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(InvSet[1] = true & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[1].Cmd == Chan2[1].Cmd', And(InvSet[1]' == True, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(InvSet[1] = true & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[1].Cmd == Chan2[1].Cmd', And(InvSet[1]' == True, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE1_1_RecvGntE2_1_SendGntE1_1_RecvInvAck11_1_SendGntE2_1_SendInvAck1_1_RecvInvAck11_1_SendInv1_1_SendInvAck1_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(InvSet[1] = true & Chan2[1].Cmd = Inv))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[1].Cmd == Chan2[1].Cmd', And(InvSet[1]' == True, Chan2[1].Cmd' == Inv), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1': NegExpr(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true)}
new_inv: !(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvGntE2 {'guard': OpExpr(=, Chan2[2].Cmd, GntE), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'E')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('CurCmd'), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [Chan2[2].Cmd == GntE, Cache[2].State' == E, Chan2[2].Cmd' == Empty, CurCmd == CurCmd', InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvGntS2 {'guard': OpExpr(=, Chan2[2].Cmd, GntS), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'S')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('CurCmd'), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [Chan2[2].Cmd == GntS, Cache[2].State' == S, Chan2[2].Cmd' == Empty, CurCmd == CurCmd', InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", Chan2[2].Cmd == Chan2[2].Cmd', InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInvAck2 {'guard': OpExpr(&, Chan2[2].Cmd = Inv, Chan3[2].Cmd = Empty), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'InvAck')), AssignCmd(FieldName(ArrayIndex(VarExpr('Cache'), VarExpr('2')), Token('CNAME', 'State')), EnumValExpr(EnumType('I', 'S', 'E'), 'I'))], 'assumption': [VarExpr('CurCmd'), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(Chan2[2].Cmd == Inv, Chan3[2].Cmd == Empty), Chan2[2].Cmd' == Empty, Chan3[2].Cmd' == InvAck, Cache[2].State' == I, CurCmd == CurCmd', InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), VarExpr('CurCmd')], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, Chan2[2].Cmd == Chan2[2].Cmd', CurCmd == CurCmd', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2 {'guard': OpExpr(&, Chan2[2].Cmd = Empty, InvSet[2] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [VarExpr('CurCmd'), ArrayIndex(VarExpr('InvSet'), VarExpr('1'))], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(Chan2[2].Cmd == Empty,
    And(InvSet[2] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[2].Cmd' == Inv, InvSet[2]' == False, CurCmd == CurCmd', InvSet[1] == InvSet[1]', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan3[2].Cmd = Empty,
 Chan2[1].Cmd = Empty,
 Chan3[1].Cmd = Empty,
 Chan2[2].Cmd' = Inv,
 Chan2[2].Cmd = Empty,
 InvSet[1]' = True,
 ExGntd = True,
 CurCmd' = "ReqS",
 InvSet[1] = True,
 InvSet[2]' = False,
 CurCmd = "ReqS",
 ShrSet[1] = True,
 InvSet[2] = True]
invlist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan3[2].Cmd, Empty)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true), NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan2[2].Cmd', InvSet[1], Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE', 'Inv'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(Chan2[2].Cmd == Empty,
     And(InvSet[2] == True,
         Or(CurCmd == "ReqE",
            And(CurCmd == "ReqS", ExGntd == True)))),
 Chan2[2].Cmd' == Inv,
 InvSet[2]' == False,
 CurCmd == CurCmd',
 InvSet[1] == InvSet[1]',
 And(Chan2[2].Cmd' == Inv,
     And(CurCmd' == "ReqS", InvSet[1]' == True)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)),
 Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"),
 Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True),
 Implies(Chan2[1].Cmd == Inv,
         Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", InvSet[1] != True)),
 Implies(InvSet[1] == True, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == Inv,
         Implies(CurCmd == "ReqS", InvSet[1] != True))]
checkVars: []
solution: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan3[2].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, Chan3[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(Chan3[2].Cmd = Empty & Chan3[1].Cmd = Empty & ShrSet[1] = true & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & InvSet[1] = true & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(Chan3[1].Cmd = Empty & ShrSet[1] = true & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & InvSet[1] = true & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(ShrSet[1] = true & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & InvSet[1] = true & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & InvSet[1] = true & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(Cache[2].State = I & Cache[1].State = I & InvSet[1] = true & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(Cache[1].State = I & InvSet[1] = true & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(InvSet[1] = true & ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(ExGntd = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2']
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, CurCmd, ReqS), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(InvSet[1] = true & CurCmd = ReqS & InvSet[2] = true & Chan2[2].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2']
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(InvSet[1] = true & ExGntd = true & InvSet[2] = true & Chan2[2].Cmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(ExGntd = true & InvSet[2] = true & Chan2[2].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2']
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, InvSet[2], true), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(InvSet[1] = true & InvSet[2] = true & Chan2[2].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2']
sublist: [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(InvSet[1] = true & ExGntd = true & Chan2[2].Cmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2']
sublist: [OpExpr(=, InvSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, InvSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(InvSet[1] = true & ExGntd = true & InvSet[2] = true);
No cti found. The invariants are OK.
sublist: [OpExpr(=, InvSet[2], true), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, InvSet[2], true), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(ExGntd = true & InvSet[2] = true);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2']
sublist: [OpExpr(=, InvSet[2], true), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, InvSet[2], true), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(InvSet[1] = true & InvSet[2] = true);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2']
sublist: [OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, ExGntd, true), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2"
   !(InvSet[1] = true & ExGntd = true);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2']
self.aux_inv: !(InvSet[1] = true & ExGntd = true & InvSet[2] = true)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = Empty'], ['Chan3[_].Cmd = InvAck', 'InvSet[_] = true'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'InvSet[_] = true'], ['InvSet[_] = true', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'InvSet[_] = true']]
add pattern: !(InvSet[1] = true & ExGntd = true & InvSet[2] = true)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan2[1].Cmd = Empty,
 Chan3[1].Cmd = Empty,
 InvSet[2] = False,
 ExGntd = True,
 InvSet[1] = True,
 Chan1[1].Cmd' = Empty,
 Chan2[2].Cmd = Inv,
 InvSet[1]' = True,
 CurCmd' = "ReqS",
 ShrSet[2] = False,
 InvSet[2]' = False,
 Chan1[1].Cmd = ReqS,
 CurCmd = "Empty",
 ShrSet[1] = True,
 Chan2[2].Cmd' = Inv]
invlist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, InvSet[2], false)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true), NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true), NegExpr(InvSet[1] = true & ExGntd = true & InvSet[2] = true)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan2[2].Cmd', Chan1[1].Cmd', Chan1[1].Cmd, Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE', 'Inv'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS),
 CurCmd' == "ReqS",
 Chan1[1].Cmd' == Empty,
 InvSet[1]' == ShrSet[1],
 InvSet[2]' == ShrSet[2],
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == Inv,
     And(CurCmd' == "ReqS", InvSet[1]' == True)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)),
 Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"),
 Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True),
 Implies(Chan2[1].Cmd == Inv,
         Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", InvSet[1] != True)),
 Implies(InvSet[1] == True, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == Inv,
         Implies(CurCmd == "ReqS", InvSet[1] != True)),
 Implies(InvSet[1] == True,
         Implies(ExGntd == True, InvSet[2] != True))]
checkVars: []
solution: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, InvSet[2], false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, InvSet[2], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(InvSet[2] = false & InvSet[1] = true & Chan3[1].Cmd = Empty & ExGntd = true & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(InvSet[1] = true & Chan3[1].Cmd = Empty & ExGntd = true & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(Chan3[1].Cmd = Empty & ExGntd = true & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(ExGntd = true & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(ShrSet[2] = false & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(Chan2[2].Cmd = Inv & ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(ShrSet[1] = true & Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(Chan2[2].Cmd = Inv & Chan1[1].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(Chan1[1].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(Chan2[2].Cmd = Inv & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1']
sublist: [OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1"
   !(Chan2[2].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS1']
self.aux_inv: !(Chan2[2].Cmd = Inv & CurCmd = Empty)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = Empty'], ['Chan3[_].Cmd = InvAck', 'InvSet[_] = true'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'InvSet[_] = true'], ['InvSet[_] = true', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'InvSet[_] = true'], ['InvSet[_] = true', 'ExGntd = true', 'InvSet[_] = true']]
exist self.aux_inv: !(Chan2[2].Cmd = Inv & CurCmd = Empty)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd'))], '!inv': NegExpr(!(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], Chan2[2].Cmd == Chan2[2].Cmd', And(Chan2[2].Cmd' == Inv,
    And(CurCmd' == "ReqS", InvSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan2[1].Cmd = Empty,
 Chan3[1].Cmd = Empty,
 ExGntd = False,
 InvSet[1] = True,
 InvSet[2] = True,
 Chan2[2].Cmd' = Inv,
 InvSet[1]' = True,
 Chan2[2].Cmd = Inv,
 Chan1[2].Cmd' = Empty,
 CurCmd' = "ReqS",
 ShrSet[2] = False,
 InvSet[2]' = False,
 CurCmd = "Empty",
 ShrSet[1] = True,
 Chan1[2].Cmd = ReqS]
invlist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, InvSet[2], true)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true), NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true), NegExpr(InvSet[1] = true & ExGntd = true & InvSet[2] = true)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan1[2].Cmd, Chan3[1].Cmd, Cache[1].State, Chan3[2].Cmd, Chan2[1].Cmd, Chan1[2].Cmd', Chan2[2].Cmd', Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE', 'Inv'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS),
 CurCmd' == "ReqS",
 Chan1[2].Cmd' == Empty,
 InvSet[1]' == ShrSet[1],
 InvSet[2]' == ShrSet[2],
 Chan2[2].Cmd == Chan2[2].Cmd',
 And(Chan2[2].Cmd' == Inv,
     And(CurCmd' == "ReqS", InvSet[1]' == True)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)),
 Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"),
 Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True),
 Implies(Chan2[1].Cmd == Inv,
         Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", InvSet[1] != True)),
 Implies(InvSet[1] == True, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == Inv,
         Implies(CurCmd == "ReqS", InvSet[1] != True)),
 Implies(InvSet[1] == True,
         Implies(ExGntd == True, InvSet[2] != True))]
checkVars: []
solution: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, InvSet[2], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true), OpExpr(=, InvSet[2], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(InvSet[2] = true & InvSet[1] = true & Chan3[1].Cmd = Empty & ExGntd = false & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(InvSet[1] = true & Chan3[1].Cmd = Empty & ExGntd = false & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(Chan3[1].Cmd = Empty & ExGntd = false & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, ExGntd, false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(ExGntd = false & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(Cache[2].State = I & Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(Cache[1].State = I & Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(Chan2[2].Cmd = Inv & ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(ShrSet[2] = false & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(Chan2[2].Cmd = Inv & ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, ShrSet[1], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(ShrSet[1] = true & Chan1[2].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(Chan2[2].Cmd = Inv & Chan1[2].Cmd = ReqS & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[2].Cmd, ReqS)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(Chan1[2].Cmd = ReqS & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(Chan2[2].Cmd = Inv & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2']
sublist: [OpExpr(=, Chan2[2].Cmd, Inv)]
inv_list [OpExpr(=, Chan2[2].Cmd, Inv)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2"
   !(Chan2[2].Cmd = Inv);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_RecvReqS2']
self.aux_inv: !(Chan2[2].Cmd = Inv & CurCmd = Empty)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = Empty'], ['Chan3[_].Cmd = InvAck', 'InvSet[_] = true'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'InvSet[_] = true'], ['InvSet[_] = true', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'InvSet[_] = true'], ['InvSet[_] = true', 'ExGntd = true', 'InvSet[_] = true']]
exist self.aux_inv: !(Chan2[2].Cmd = Inv & CurCmd = Empty)
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1': NegExpr(InvSet[1] = true & ExGntd = true & InvSet[2] = true)}
new_inv: !(InvSet[1] = true & ExGntd = true & InvSet[2] = true)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))], '!inv': NegExpr(!(InvSet[1] = true & ExGntd = true & InvSet[2] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", InvSet[1] == InvSet[1]', InvSet[2] == InvSet[2]', And(InvSet[1]' == True,
    And(ExGntd' == True, InvSet[2]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))], '!inv': NegExpr(!(InvSet[1] = true & ExGntd = true & InvSet[2] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", InvSet[1] == InvSet[1]', InvSet[2] == InvSet[2]', And(InvSet[1]' == True,
    And(ExGntd' == True, InvSet[2]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))], '!inv': NegExpr(!(InvSet[1] = true & ExGntd = true & InvSet[2] = true))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, InvSet[1] == InvSet[1]', InvSet[2] == InvSet[2]', And(InvSet[1]' == True,
    And(ExGntd' == True, InvSet[2]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvInvAck12 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))], '!inv': NegExpr(!(InvSet[1] = true & ExGntd = true & InvSet[2] = true))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, ExGntd' == False, InvSet[1] == InvSet[1]', InvSet[2] == InvSet[2]', And(InvSet[1]' == True,
    And(ExGntd' == True, InvSet[2]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_SendInv1 {'guard': OpExpr(&, Chan2[1].Cmd = Empty, InvSet[1] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [VarExpr('ExGntd'), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))], '!inv': NegExpr(!(InvSet[1] = true & ExGntd = true & InvSet[2] = true))}
6. F: [And(Chan2[1].Cmd == Empty,
    And(InvSet[1] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[1].Cmd' == Inv, InvSet[1]' == False, ExGntd == ExGntd', InvSet[2] == InvSet[2]', And(InvSet[1]' == True,
    And(ExGntd' == True, InvSet[2]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_SendInv2 {'guard': OpExpr(&, Chan2[2].Cmd = Empty, InvSet[2] = true & (CurCmd = ReqE | CurCmd = ReqS & ExGntd = true)), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Inv')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('InvSet'), VarExpr('1')), VarExpr('ExGntd')], '!inv': NegExpr(!(InvSet[1] = true & ExGntd = true & InvSet[2] = true))}
6. F: [And(Chan2[2].Cmd == Empty,
    And(InvSet[2] == True,
        Or(CurCmd == "ReqE",
           And(CurCmd == "ReqS", ExGntd == True)))), Chan2[2].Cmd' == Inv, InvSet[2]' == False, InvSet[1] == InvSet[1]', ExGntd == ExGntd', And(InvSet[1]' == True,
    And(ExGntd' == True, InvSet[2]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(InvSet[1] = true & ExGntd = true & InvSet[2] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE), CurCmd' == "ReqE", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], ExGntd == ExGntd', And(InvSet[1]' == True,
    And(ExGntd' == True, InvSet[2]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True))]
sat
解是：

[Cache[1].State = I,
 Cache[2].State = I,
 Chan2[1].Cmd = Empty,
 Chan3[1].Cmd = Empty,
 InvSet[1] = False,
 Chan2[2].Cmd = Empty,
 InvSet[2] = True,
 Chan1[1].Cmd' = Empty,
 InvSet[1]' = True,
 ShrSet[2] = True,
 ExGntd = True,
 InvSet[2]' = True,
 CurCmd' = "ReqE",
 Chan1[1].Cmd = ReqE,
 CurCmd = "Empty",
 ShrSet[1] = True,
 ExGntd' = True]
invlist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false), OpExpr(=, InvSet[2], true)]
inv already exist: [OpExpr(->, 1 != 2, (Cache[1].State = E ->   Cache[2].State = I) & (Cache[1].State = S ->   Cache[2].State = I | Cache[2].State = S)), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntE), NegExpr(Cache[1].State = S & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & Chan2[1].Cmd = GntS), NegExpr(Chan2[1].Cmd = GntE & Chan2[2].Cmd = GntE), NegExpr(Cache[2].State = E & ExGntd = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = GntS), NegExpr(Cache[1].State = S & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & ExGntd = false), NegExpr(Cache[2].State = E & Chan3[1].Cmd = InvAck), NegExpr(Chan2[1].Cmd = GntS & ShrSet[1] = false), NegExpr(Cache[1].State = S & Chan3[1].Cmd = InvAck), NegExpr(Chan2[2].Cmd = GntE & Chan3[1].Cmd = InvAck), NegExpr(Cache[2].State = E & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = GntS & Chan3[1].Cmd = InvAck), NegExpr(Chan3[1].Cmd = InvAck & ShrSet[1] = false), NegExpr(Chan2[2].Cmd = GntE & Chan2[1].Cmd = Inv), NegExpr(Cache[2].State = E & InvSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & ExGntd = false & CurCmd = ReqS), NegExpr(ShrSet[1] = false & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = GntE & InvSet[1] = true), NegExpr(Cache[2].State = E & ShrSet[1] = true), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = ReqS & Chan3[2].Cmd = InvAck), NegExpr(CurCmd = ReqS & ExGntd = false & Chan2[1].Cmd = Inv), NegExpr(Chan3[1].Cmd = InvAck & CurCmd = Empty), NegExpr(Chan2[1].Cmd = Inv & Chan3[1].Cmd = InvAck), NegExpr(ShrSet[1] = false & InvSet[1] = true), NegExpr(Chan2[2].Cmd = GntE & ShrSet[1] = true), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & Chan2[1].Cmd = Inv), NegExpr(Chan2[1].Cmd = Inv & CurCmd = Empty), NegExpr(Chan3[1].Cmd = InvAck & InvSet[1] = true), NegExpr(Chan2[1].Cmd = Inv & CurCmd = ReqS & Chan2[2].Cmd = Inv), NegExpr(Chan3[2].Cmd = InvAck & CurCmd = ReqS & InvSet[1] = true), NegExpr(InvSet[1] = true & Chan2[1].Cmd = Inv), NegExpr(Chan2[2].Cmd = Inv & CurCmd = ReqS & InvSet[1] = true), NegExpr(InvSet[1] = true & ExGntd = true & InvSet[2] = true)]
set(self.enum_notEqulVars): {Chan3[2].Cmd, Chan2[1].Cmd, Chan3[1].Cmd, Chan2[2].Cmd}
set(self.enum_EqulVars): {Cache[2].State, Chan3[1].Cmd, Cache[1].State, Chan3[2].Cmd, ExGntd, Chan2[1].Cmd, Chan1[1].Cmd', Chan1[1].Cmd, Chan2[2].Cmd}
self.enum_notEqulVars_map: {'Chan2[1].Cmd': ['GntE', 'GntS', 'GntS', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv', 'Inv'], 'Chan2[2].Cmd': ['GntE', 'GntE', 'Inv'], 'Chan3[1].Cmd': ['InvAck', 'InvAck', 'InvAck', 'InvAck', 'InvAck'], 'Chan3[2].Cmd': ['InvAck']}
1111: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqE),
 CurCmd' == "ReqE",
 Chan1[1].Cmd' == Empty,
 InvSet[1]' == ShrSet[1],
 InvSet[2]' == ShrSet[2],
 ExGntd == ExGntd',
 And(InvSet[1]' == True,
     And(ExGntd' == True, InvSet[2]' == True)),
 And(Implies(Cache[1].State == E, Cache[2].State == I),
     Implies(Cache[1].State == S,
             Or(Cache[2].State == I, Cache[2].State == S))),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntE),
 Implies(Cache[1].State == S, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, Chan2[1].Cmd != GntS),
 Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE),
 Implies(Cache[2].State == E, ExGntd != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS),
 Implies(Cache[1].State == S, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, ExGntd != False),
 Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck),
 Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False),
 Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck),
 Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck),
 Implies(Cache[2].State == E, Chan2[1].Cmd != Inv),
 Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck),
 Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False),
 Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv),
 Implies(Cache[2].State == E, InvSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(ExGntd == False, CurCmd != "ReqS")),
 Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == GntE, InvSet[1] != True),
 Implies(Cache[2].State == E, ShrSet[1] != True),
 Implies(Chan3[1].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)),
 Implies(CurCmd == "ReqS",
         Implies(ExGntd == False, Chan2[1].Cmd != Inv)),
 Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"),
 Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck),
 Implies(ShrSet[1] == False, InvSet[1] != True),
 Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)),
 Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"),
 Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True),
 Implies(Chan2[1].Cmd == Inv,
         Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)),
 Implies(Chan3[2].Cmd == InvAck,
         Implies(CurCmd == "ReqS", InvSet[1] != True)),
 Implies(InvSet[1] == True, Chan2[1].Cmd != Inv),
 Implies(Chan2[2].Cmd == Inv,
         Implies(CurCmd == "ReqS", InvSet[1] != True)),
 Implies(InvSet[1] == True,
         Implies(ExGntd == True, InvSet[2] != True))]
checkVars: []
solution: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false), OpExpr(=, InvSet[2], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false), OpExpr(=, InvSet[2], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(InvSet[2] = true & InvSet[1] = false & Chan3[1].Cmd = Empty & Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & ExGntd = true & ShrSet[2] = true & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty), OpExpr(=, InvSet[1], false)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(InvSet[1] = false & Chan3[1].Cmd = Empty & Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & ExGntd = true & ShrSet[2] = true & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty), OpExpr(=, Chan3[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(Chan3[1].Cmd = Empty & Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & ExGntd = true & ShrSet[2] = true & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty), OpExpr(=, Chan2[2].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(Chan2[2].Cmd = Empty & Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & ExGntd = true & ShrSet[2] = true & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I), OpExpr(=, Chan2[1].Cmd, Empty)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(Chan2[1].Cmd = Empty & Cache[2].State = I & Cache[1].State = I & ExGntd = true & ShrSet[2] = true & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I), OpExpr(=, Cache[2].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(Cache[2].State = I & Cache[1].State = I & ExGntd = true & ShrSet[2] = true & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true), OpExpr(=, Cache[1].State, I)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(Cache[1].State = I & ExGntd = true & ShrSet[2] = true & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(ShrSet[2] = true & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[1], true), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(ExGntd = true & ShrSet[1] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, Chan1[1].Cmd, ReqE), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(ExGntd = true & ShrSet[2] = true & Chan1[1].Cmd = ReqE & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true & CurCmd = Empty);
No cti found. The invariants are OK.
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(ShrSet[2] = true & ShrSet[1] = true & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[1], true), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(ExGntd = true & ShrSet[1] = true & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1']
sublist: [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, CurCmd, Empty), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(ExGntd = true & ShrSet[2] = true & CurCmd = Empty);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1']
sublist: [OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true);
No cti found. The invariants are OK.
sublist: [OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true)]
inv_list [OpExpr(=, ShrSet[1], true), OpExpr(=, ShrSet[2], true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(ShrSet[2] = true & ShrSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1']
sublist: [OpExpr(=, ShrSet[1], true), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, ShrSet[1], true), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(ExGntd = true & ShrSet[1] = true);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1']
sublist: [OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true)]
inv_list [OpExpr(=, ShrSet[2], true), OpExpr(=, ExGntd, true)]
new_inv: invariant "CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1"
   !(ExGntd = true & ShrSet[2] = true);
counter_ex: ['CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1']
self.aux_inv: !(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true)
invPattern: [['Cache[_].State = E', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = S', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'Chan2[_].Cmd = GntS'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntE'], ['Cache[_].State = E', 'ExGntd = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = GntS'], ['Cache[_].State = S', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'ExGntd = false'], ['Cache[_].State = E', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntS', 'ShrSet[_] = false'], ['Cache[_].State = S', 'Chan3[_].Cmd = InvAck'], ['Chan2[_].Cmd = GntE', 'Chan3[_].Cmd = InvAck'], ['Cache[_].State = E', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntS', 'Chan3[_].Cmd = InvAck'], ['Chan3[_].Cmd = InvAck', 'ShrSet[_] = false'], ['Chan2[_].Cmd = GntE', 'Chan2[_].Cmd = Inv'], ['Cache[_].State = E', 'InvSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'ExGntd = false', 'CurCmd = ReqS'], ['ShrSet[_] = false', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = GntE', 'InvSet[_] = true'], ['Cache[_].State = E', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan3[_].Cmd = InvAck'], ['CurCmd = ReqS', 'ExGntd = false', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = Empty'], ['Chan2[_].Cmd = Inv', 'Chan3[_].Cmd = InvAck'], ['ShrSet[_] = false', 'InvSet[_] = true'], ['Chan2[_].Cmd = GntE', 'ShrSet[_] = true'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = Empty'], ['Chan3[_].Cmd = InvAck', 'InvSet[_] = true'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'Chan2[_].Cmd = Inv'], ['Chan3[_].Cmd = InvAck', 'CurCmd = ReqS', 'InvSet[_] = true'], ['InvSet[_] = true', 'Chan2[_].Cmd = Inv'], ['Chan2[_].Cmd = Inv', 'CurCmd = ReqS', 'InvSet[_] = true'], ['InvSet[_] = true', 'ExGntd = true', 'InvSet[_] = true']]
add pattern: !(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true)
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqE), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqE')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(InvSet[1] = true & ExGntd = true & InvSet[2] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqE), CurCmd' == "ReqE", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], ExGntd == ExGntd', And(InvSet[1]' == True,
    And(ExGntd' == True, InvSet[2]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True)), Implies(ExGntd == True,
        Implies(ShrSet[2] == True, ShrSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqS1 {'guard': OpExpr(&, CurCmd = Empty, Chan1[1].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(InvSet[1] = true & ExGntd = true & InvSet[2] = true))}
6. F: [And(CurCmd == "Empty", Chan1[1].Cmd == ReqS), CurCmd' == "ReqS", Chan1[1].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], ExGntd == ExGntd', And(InvSet[1]' == True,
    And(ExGntd' == True, InvSet[2]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True)), Implies(ExGntd == True,
        Implies(ShrSet[2] == True, ShrSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqS2 {'guard': OpExpr(&, CurCmd = Empty, Chan1[2].Cmd = ReqS), 'assign': [AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'ReqS')), AssignCmd(FieldName(ArrayIndex(VarExpr('Chan1'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))), AssignCmd(ArrayIndex(VarExpr('InvSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')))], 'assumption': [VarExpr('ExGntd')], '!inv': NegExpr(!(InvSet[1] = true & ExGntd = true & InvSet[2] = true))}
6. F: [And(CurCmd == "Empty", Chan1[2].Cmd == ReqS), CurCmd' == "ReqS", Chan1[2].Cmd' == Empty, InvSet[1]' == ShrSet[1], InvSet[2]' == ShrSet[2], ExGntd == ExGntd', And(InvSet[1]' == True,
    And(ExGntd' == True, InvSet[2]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True)), Implies(ExGntd == True,
        Implies(ShrSet[2] == True, ShrSet[1] != True))]
unsat
list0: {'CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1_1': NegExpr(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true)}
new_inv: !(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true)
booleanExpr_list: [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('1')), ArrayIndex(VarExpr('InvSet'), VarExpr('2'))]
list1: {}
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1_1_SendGntE1 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[1].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('2'))], '!inv': NegExpr(!(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[1].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[1].Cmd' == GntE, ShrSet[1]' == True, ExGntd' == True, CurCmd' == "Empty", ShrSet[2] == ShrSet[2]', And(ExGntd' == True,
    And(ShrSet[2]' == True, ShrSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True)), Implies(ExGntd == True,
        Implies(ShrSet[2] == True, ShrSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1_1_SendGntE2 {'guard': OpExpr(&, CurCmd = ReqE, Chan2[2].Cmd = Empty & ExGntd = false & ShrSet[2] = false & ShrSet[1] = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntE')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true))}
6. F: [And(CurCmd == "ReqE",
    And(Chan2[2].Cmd == Empty,
        And(ExGntd == False,
            And(ShrSet[2] == False, ShrSet[1] == False)))), Chan2[2].Cmd' == GntE, ShrSet[2]' == True, ExGntd' == True, CurCmd' == "Empty", ShrSet[1] == ShrSet[1]', And(ExGntd' == True,
    And(ShrSet[2]' == True, ShrSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True)), Implies(ExGntd == True,
        Implies(ShrSet[2] == True, ShrSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1_1_SendGntS1 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[1].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2'))], '!inv': NegExpr(!(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[1].Cmd == Empty, ExGntd == False)), Chan2[1].Cmd' == GntS, ShrSet[1]' == True, CurCmd' == "Empty", ExGntd == ExGntd', ShrSet[2] == ShrSet[2]', And(ExGntd' == True,
    And(ShrSet[2]' == True, ShrSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True)), Implies(ExGntd == True,
        Implies(ShrSet[2] == True, ShrSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1_1_SendGntS2 {'guard': OpExpr(&, CurCmd = ReqS, Chan2[2].Cmd = Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan2'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'GntS')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(True)), AssignCmd(VarExpr('CurCmd'), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty'))], 'assumption': [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true))}
6. F: [And(CurCmd == "ReqS",
    And(Chan2[2].Cmd == Empty, ExGntd == False)), Chan2[2].Cmd' == GntS, ShrSet[2]' == True, CurCmd' == "Empty", ExGntd == ExGntd', ShrSet[1] == ShrSet[1]', And(ExGntd' == True,
    And(ShrSet[2]' == True, ShrSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True)), Implies(ExGntd == True,
        Implies(ShrSet[2] == True, ShrSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1_1_RecvInvAck11 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('2'))], '!inv': NegExpr(!(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd' == False, ShrSet[2] == ShrSet[2]', And(ExGntd' == True,
    And(ShrSet[2]' == True, ShrSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True)), Implies(ExGntd == True,
        Implies(ShrSet[2] == True, ShrSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1_1_RecvInvAck12 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = true), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False)), AssignCmd(VarExpr('ExGntd'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == True)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, ExGntd' == False, ShrSet[1] == ShrSet[1]', And(ExGntd' == True,
    And(ShrSet[2]' == True, ShrSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True)), Implies(ExGntd == True,
        Implies(ShrSet[2] == True, ShrSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1_1_RecvInvAck21 {'guard': OpExpr(&, Chan3[1].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('1')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('1')), BooleanExpr(False))], 'assumption': [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('2'))], '!inv': NegExpr(!(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true))}
6. F: [And(Chan3[1].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[1].Cmd' == Empty, ShrSet[1]' == False, ExGntd == ExGntd', ShrSet[2] == ShrSet[2]', And(ExGntd' == True,
    And(ShrSet[2]' == True, ShrSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True)), Implies(ExGntd == True,
        Implies(ShrSet[2] == True, ShrSet[1] != True))]
unsat
CntrlProp_RecvGntE2_1_RecvGntS1_1_SendGntE2_1_RecvInvAck11_1_SendGntS1_1_RecvInvAck12_1_SendInvAck1_1_SendInvAck2_1_SendInv1_1_SendInv2_1_RecvReqE1_1_RecvInvAck22 {'guard': OpExpr(&, Chan3[2].Cmd = InvAck, CurCmd != Empty & ExGntd = false), 'assign': [AssignCmd(FieldName(ArrayIndex(VarExpr('Chan3'), VarExpr('2')), Token('CNAME', 'Cmd')), EnumValExpr(EnumType('Empty', 'ReqS', 'ReqE', 'Inv', 'InvAck', 'GntS', 'GntE'), 'Empty')), AssignCmd(ArrayIndex(VarExpr('ShrSet'), VarExpr('2')), BooleanExpr(False))], 'assumption': [VarExpr('ExGntd'), ArrayIndex(VarExpr('ShrSet'), VarExpr('1'))], '!inv': NegExpr(!(ExGntd = true & ShrSet[2] = true & ShrSet[1] = true))}
6. F: [And(Chan3[2].Cmd == InvAck,
    And(CurCmd != "Empty", ExGntd == False)), Chan3[2].Cmd' == Empty, ShrSet[2]' == False, ExGntd == ExGntd', ShrSet[1] == ShrSet[1]', And(ExGntd' == True,
    And(ShrSet[2]' == True, ShrSet[1]' == True)), And(Implies(Cache[1].State == E, Cache[2].State == I),
    Implies(Cache[1].State == S,
            Or(Cache[2].State == I, Cache[2].State == S))), Implies(Cache[2].State == E, Chan2[1].Cmd != GntE), Implies(Cache[1].State == S, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, Chan2[1].Cmd != GntS), Implies(Chan2[1].Cmd == GntE, Chan2[2].Cmd != GntE), Implies(Cache[2].State == E, ExGntd != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != GntS), Implies(Cache[1].State == S, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, ExGntd != False), Implies(Cache[2].State == E, Chan3[1].Cmd != InvAck), Implies(Chan2[1].Cmd == GntS, ShrSet[1] != False), Implies(Cache[1].State == S, Chan3[1].Cmd != InvAck), Implies(Chan2[2].Cmd == GntE, Chan3[1].Cmd != InvAck), Implies(Cache[2].State == E, Chan2[1].Cmd != Inv), Implies(Chan2[1].Cmd == GntS, Chan3[1].Cmd != InvAck), Implies(Chan3[1].Cmd == InvAck, ShrSet[1] != False), Implies(Chan2[2].Cmd == GntE, Chan2[1].Cmd != Inv), Implies(Cache[2].State == E, InvSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(ExGntd == False, CurCmd != "ReqS")), Implies(ShrSet[1] == False, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == GntE, InvSet[1] != True), Implies(Cache[2].State == E, ShrSet[1] != True), Implies(Chan3[1].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan3[2].Cmd != InvAck)), Implies(CurCmd == "ReqS",
        Implies(ExGntd == False, Chan2[1].Cmd != Inv)), Implies(Chan3[1].Cmd == InvAck, CurCmd != "Empty"), Implies(Chan2[1].Cmd == Inv, Chan3[1].Cmd != InvAck), Implies(ShrSet[1] == False, InvSet[1] != True), Implies(Chan2[2].Cmd == GntE, ShrSet[1] != True), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", Chan2[1].Cmd != Inv)), Implies(Chan2[1].Cmd == Inv, CurCmd != "Empty"), Implies(Chan3[1].Cmd == InvAck, InvSet[1] != True), Implies(Chan2[1].Cmd == Inv,
        Implies(CurCmd == "ReqS", Chan2[2].Cmd != Inv)), Implies(Chan3[2].Cmd == InvAck,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True, Chan2[1].Cmd != Inv), Implies(Chan2[2].Cmd == Inv,
        Implies(CurCmd == "ReqS", InvSet[1] != True)), Implies(InvSet[1] == True,
        Implies(ExGntd == True, InvSet[2] != True)), Implies(ExGntd == True,
        Implies(ShrSet[2] == True, ShrSet[1] != True))]
unsat
times of calling SMT: 358
times of calling LocalSearch: 732
