

All parameterized rules:
{'Try': {'var': {'i': VarType(NODE)}, 'guard': OpExpr(=, n[i], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('i')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))]}, 'Crit': {'var': {'i': VarType(NODE)}, 'guard': OpExpr(&, n[i] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('i')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))]}, 'Exit': {'var': {'i': VarType(NODE)}, 'guard': OpExpr(=, n[i], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('i')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))]}, 'Idle': {'var': {'i': VarType(NODE)}, 'guard': OpExpr(=, n[i], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('i')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))]}}

All parameterized invariants:
{'mutualEx': {'invs': OpExpr(->, i != j, n[i] = C ->   n[j] != C), 'var': {'i': VarType(NODE), 'j': VarType(NODE)}}, 'mutualEx_Crit1': {'invs': NegExpr(n[j] = C & x = true), 'var': {'j': VarType(NODE), 'x': BooleanType()}}, 'mutualEx_Crit1_1_Idle1': {'invs': NegExpr(n[j] = C & n[i] = E), 'var': {'i': VarType(NODE), 'j': VarType(NODE)}}, 'mutualEx_Crit1_1_Idle1_1_Crit2': {'invs': NegExpr(n[i] = E & x = true), 'var': {'i': VarType(NODE), 'x': BooleanType()}}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2': {'invs': NegExpr(n[i] = E & n[j] = E), 'var': {'j': VarType(NODE), 'i': VarType(NODE)}}}

All instantiated invariants:
{'mutualEx': OpExpr(->, 1 != 2, n[1] = C ->   n[2] != C), 'mutualEx_Crit1': NegExpr(n[1] = C & x = true), 'mutualEx_Crit1_1_Idle1': NegExpr(n[2] = C & n[1] = E), 'mutualEx_Crit1_1_Idle1_1_Crit2': NegExpr(n[1] = E & x = true), 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2': NegExpr(n[2] = E & n[1] = E)}

无效F:
{'mutualEx_Crit1_Try2': {'guard': OpExpr(=, n[2], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1')), VarExpr('x')], '!inv': NegExpr(!(n[1] = C & x = true))}, 'mutualEx_Crit1_Exit2': {'guard': OpExpr(=, n[2], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1')), VarExpr('x')], '!inv': NegExpr(!(n[1] = C & x = true))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_Try2': {'guard': OpExpr(=, n[2], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1')), VarExpr('x')], '!inv': NegExpr(!(n[1] = E & x = true))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_Exit2': {'guard': OpExpr(=, n[2], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1')), VarExpr('x')], '!inv': NegExpr(!(n[1] = E & x = true))}}

有效F:
{'mutualEx_Try1': {'guard': OpExpr(=, n[1], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(1 != 2 -> (  n[1] = C ->   n[2] != C))}, 'mutualEx_Try2': {'guard': OpExpr(=, n[2], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(1 != 2 -> (  n[1] = C ->   n[2] != C))}, 'mutualEx_Crit1': {'guard': OpExpr(&, n[1] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(1 != 2 -> (  n[1] = C ->   n[2] != C))}, 'mutualEx_Crit2': {'guard': OpExpr(&, n[2] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(1 != 2 -> (  n[1] = C ->   n[2] != C))}, 'mutualEx_Exit1': {'guard': OpExpr(=, n[1], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(1 != 2 -> (  n[1] = C ->   n[2] != C))}, 'mutualEx_Exit2': {'guard': OpExpr(=, n[2], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(1 != 2 -> (  n[1] = C ->   n[2] != C))}, 'mutualEx_Idle1': {'guard': OpExpr(=, n[1], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(1 != 2 -> (  n[1] = C ->   n[2] != C))}, 'mutualEx_Idle2': {'guard': OpExpr(=, n[2], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(1 != 2 -> (  n[1] = C ->   n[2] != C))}, 'mutualEx_Crit1_Try1': {'guard': OpExpr(=, n[1], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [VarExpr('x')], '!inv': NegExpr(!(n[1] = C & x = true))}, 'mutualEx_Crit1_Crit1': {'guard': OpExpr(&, n[1] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))], 'assumption': [], '!inv': NegExpr(!(n[1] = C & x = true))}, 'mutualEx_Crit1_Crit2': {'guard': OpExpr(&, n[2] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[1] = C & x = true))}, 'mutualEx_Crit1_Exit1': {'guard': OpExpr(=, n[1], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [VarExpr('x')], '!inv': NegExpr(!(n[1] = C & x = true))}, 'mutualEx_Crit1_Idle1': {'guard': OpExpr(=, n[1], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))], 'assumption': [], '!inv': NegExpr(!(n[1] = C & x = true))}, 'mutualEx_Crit1_Idle2': {'guard': OpExpr(=, n[2], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[1] = C & x = true))}, 'mutualEx_Crit1_1_Idle1_Try1': {'guard': OpExpr(=, n[1], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(!(n[2] = C & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_Try2': {'guard': OpExpr(=, n[2], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[2] = C & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_Crit1': {'guard': OpExpr(&, n[1] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(!(n[2] = C & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_Crit2': {'guard': OpExpr(&, n[2] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[2] = C & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_Exit1': {'guard': OpExpr(=, n[1], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(!(n[2] = C & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_Exit2': {'guard': OpExpr(=, n[2], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[2] = C & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_Idle1': {'guard': OpExpr(=, n[1], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(!(n[2] = C & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_Idle2': {'guard': OpExpr(=, n[2], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[2] = C & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_Try1': {'guard': OpExpr(=, n[1], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [VarExpr('x')], '!inv': NegExpr(!(n[1] = E & x = true))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_Crit1': {'guard': OpExpr(&, n[1] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))], 'assumption': [], '!inv': NegExpr(!(n[1] = E & x = true))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_Crit2': {'guard': OpExpr(&, n[2] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[1] = E & x = true))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_Exit1': {'guard': OpExpr(=, n[1], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [VarExpr('x')], '!inv': NegExpr(!(n[1] = E & x = true))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_Idle1': {'guard': OpExpr(=, n[1], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))], 'assumption': [], '!inv': NegExpr(!(n[1] = E & x = true))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_Idle2': {'guard': OpExpr(=, n[2], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[1] = E & x = true))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_Try1': {'guard': OpExpr(=, n[1], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(!(n[2] = E & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_Try2': {'guard': OpExpr(=, n[2], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[2] = E & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_Crit1': {'guard': OpExpr(&, n[1] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(!(n[2] = E & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_Crit2': {'guard': OpExpr(&, n[2] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[2] = E & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_Exit1': {'guard': OpExpr(=, n[1], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(!(n[2] = E & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_Exit2': {'guard': OpExpr(=, n[2], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[2] = E & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_Idle1': {'guard': OpExpr(=, n[1], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(!(n[2] = E & n[1] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_Idle2': {'guard': OpExpr(=, n[2], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[2] = E & n[1] = E))}}

