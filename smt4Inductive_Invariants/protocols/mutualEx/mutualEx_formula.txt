

All parameterized rules:
{'Try': {'var': {'i': VarType(NODE)}, 'guard': OpExpr(=, n[i], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('i')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))]}, 'Crit': {'var': {'i': VarType(NODE)}, 'guard': OpExpr(&, n[i] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('i')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))]}, 'Exit': {'var': {'i': VarType(NODE)}, 'guard': OpExpr(=, n[i], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('i')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))]}, 'Idle': {'var': {'i': VarType(NODE)}, 'guard': OpExpr(=, n[i], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('i')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))]}}

All parameterized invariants:
{'mutualEx': {'invs': OpExpr(->, i != j, n[i] = C ->   n[j] != C), 'var': {'i': VarType(NODE), 'j': VarType(NODE)}}}

All instantiated invariants:
{'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_1': NegExpr(n[1] = E & n[2] = E)}

无效F:
{'mutualEx_Crit1_1_Try1': {'guard': OpExpr(=, n[1], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2')), VarExpr('x')], '!inv': NegExpr(!(n[2] = C & x = true))}, 'mutualEx_Crit1_1_Exit1': {'guard': OpExpr(=, n[1], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2')), VarExpr('x')], '!inv': NegExpr(!(n[2] = C & x = true))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Try2': {'guard': OpExpr(=, n[2], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1')), VarExpr('x')], '!inv': NegExpr(!(n[1] = E & x = true))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Exit2': {'guard': OpExpr(=, n[2], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1')), VarExpr('x')], '!inv': NegExpr(!(n[1] = E & x = true))}}

有效F:
{'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_1_Try1': {'guard': OpExpr(=, n[1], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(!(n[1] = E & n[2] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_1_Try2': {'guard': OpExpr(=, n[2], I), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'T'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[1] = E & n[2] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_1_Crit1': {'guard': OpExpr(&, n[1] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(!(n[1] = E & n[2] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_1_Crit2': {'guard': OpExpr(&, n[2] = T, x = true), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'C')), AssignCmd(VarExpr('x'), BooleanExpr(False))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[1] = E & n[2] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_1_Exit1': {'guard': OpExpr(=, n[1], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(!(n[1] = E & n[2] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_1_Exit2': {'guard': OpExpr(=, n[2], C), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'E'))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[1] = E & n[2] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_1_Idle1': {'guard': OpExpr(=, n[1], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('1')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('2'))], '!inv': NegExpr(!(n[1] = E & n[2] = E))}, 'mutualEx_Crit1_1_Idle1_1_Crit2_1_Idle2_1_Idle2': {'guard': OpExpr(=, n[2], E), 'assign': [AssignCmd(ArrayIndex(VarExpr('n'), VarExpr('2')), EnumValExpr(EnumType('I', 'T', 'C', 'E'), 'I')), AssignCmd(VarExpr('x'), BooleanExpr(True))], 'assumption': [ArrayIndex(VarExpr('n'), VarExpr('1'))], '!inv': NegExpr(!(n[1] = E & n[2] = E))}}

